# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod example_traits { use crate as example_traits_nested ; pub mod transport { use crate as example_traits_nested ; pub mod transport_request { use crate as example_traits_nested ; # [doc = "FFI-representation of the [`Identifier`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_Identifier (u32) ; impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: Identifier > for example_traits_transport_transport_request_Identifier { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_Identifier) -> example_traits :: transport :: transport_request :: Identifier { let ffi_ref = & * ffi ; example_traits :: transport :: transport_request :: Identifier (ffi_ref . 0) } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: Identifier > for example_traits_transport_transport_request_Identifier { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: Identifier) -> * const example_traits_transport_transport_request_Identifier { ferment :: boxed (example_traits_transport_transport_request_Identifier (obj . 0)) } } impl Drop for example_traits_transport_transport_request_Identifier { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Identifier_ctor (o_0 : u32) -> * mut example_traits_transport_transport_request_Identifier { ferment :: boxed (example_traits_transport_transport_request_Identifier (o_0)) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Identifier_destroy (ffi : * mut example_traits_transport_transport_request_Identifier) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Identifier_get_0 (obj : * const example_traits_transport_transport_request_Identifier) -> u32 { (* obj) . 0 } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Identifier_set_0 (obj : * mut example_traits_transport_transport_request_Identifier , value : u32) { (* obj) . 0 = value ; } # [doc = "FFI-representation of the [`CoreGrpcClient`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_CoreGrpcClient { pub uri : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_Uri } impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: CoreGrpcClient > for example_traits_transport_transport_request_CoreGrpcClient { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_CoreGrpcClient) -> example_traits :: transport :: transport_request :: CoreGrpcClient { let ffi_ref = & * ffi ; example_traits :: transport :: transport_request :: CoreGrpcClient { uri : < crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_Uri as ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: Uri >> :: ffi_from (ffi_ref . uri) } } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: CoreGrpcClient > for example_traits_transport_transport_request_CoreGrpcClient { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: CoreGrpcClient) -> * const example_traits_transport_transport_request_CoreGrpcClient { ferment :: boxed (example_traits_transport_transport_request_CoreGrpcClient { uri : < crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_Uri as ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: Uri >> :: ffi_to (obj . uri) }) } } impl Drop for example_traits_transport_transport_request_CoreGrpcClient { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . uri) ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_ctor (uri : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_Uri) -> * mut example_traits_transport_transport_request_CoreGrpcClient { ferment :: boxed (example_traits_transport_transport_request_CoreGrpcClient { uri }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_destroy (ffi : * mut example_traits_transport_transport_request_CoreGrpcClient) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_get_uri (obj : * const example_traits_transport_transport_request_CoreGrpcClient) -> * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_Uri { (* obj) . uri } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_set_uri (obj : * mut example_traits_transport_transport_request_CoreGrpcClient , value : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_Uri) { (* obj) . uri = value ; } # [no_mangle] pub static example_traits_transport_transport_request_CoreGrpcClient_example_traits_transport_transport_request_CanRetry : crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry_VTable = { # [no_mangle] unsafe extern "C" fn example_traits_transport_transport_request_CanRetry_example_traits_transport_transport_request_CoreGrpcClient_can_retry (self_ : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry) -> bool { let obj = < example_traits :: transport :: transport_request :: CoreGrpcClient as example_traits :: transport :: transport_request :: CanRetry > :: can_retry (& * ((* self_) . object as * const example_traits :: transport :: transport_request :: CoreGrpcClient)) ; obj } crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry_VTable { can_retry : example_traits_transport_transport_request_CanRetry_example_traits_transport_transport_request_CoreGrpcClient_can_retry } } ; # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_as_crate_fermented_types_example_traits_transport_transport_request_example_traits_transport_transport_request_CanRetry (obj : * const example_traits :: transport :: transport_request :: CoreGrpcClient) -> crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry { crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry { object : obj as * const () , vtable : & example_traits_transport_transport_request_CoreGrpcClient_example_traits_transport_transport_request_CanRetry } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_as_crate_fermented_types_example_traits_transport_transport_request_example_traits_transport_transport_request_CanRetry_destroy (obj : crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry) { ferment :: unbox_any (obj . object as * mut example_traits :: transport :: transport_request :: CoreGrpcClient) ; } # [doc = "FFI-representation of the [`example_traits::transport::transport_request::CoreGrpcClient::can_retry`]"] # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_CanRetry_can_retry (self_ : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry) -> bool { let obj = < example_traits :: transport :: transport_request :: CoreGrpcClient as example_traits :: transport :: transport_request :: CanRetry > :: can_retry (& * ((* self_) . object as * const example_traits :: transport :: transport_request :: CoreGrpcClient)) ; obj } # [doc = "FFI-representation of the [`example_traits::transport::transport_request::CoreGrpcClient::can_retry`]"] # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_CoreGrpcClient_can_retry (self_ : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CoreGrpcClient) -> bool { let obj = < example_traits :: transport :: transport_request :: CoreGrpcClient as example_traits :: transport :: transport_request :: CanRetry > :: can_retry (Box :: leak (Box :: new (< crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CoreGrpcClient as ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: CoreGrpcClient >> :: ffi_from (self_)))) ; obj } # [doc = "FFI-representation of the [`GetDocumentsResponse`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_GetDocumentsResponse { pub version : u32 } impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: GetDocumentsResponse > for example_traits_transport_transport_request_GetDocumentsResponse { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_GetDocumentsResponse) -> example_traits :: transport :: transport_request :: GetDocumentsResponse { let ffi_ref = & * ffi ; example_traits :: transport :: transport_request :: GetDocumentsResponse { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: GetDocumentsResponse > for example_traits_transport_transport_request_GetDocumentsResponse { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: GetDocumentsResponse) -> * const example_traits_transport_transport_request_GetDocumentsResponse { ferment :: boxed (example_traits_transport_transport_request_GetDocumentsResponse { version : obj . version }) } } impl Drop for example_traits_transport_transport_request_GetDocumentsResponse { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsResponse_ctor (version : u32) -> * mut example_traits_transport_transport_request_GetDocumentsResponse { ferment :: boxed (example_traits_transport_transport_request_GetDocumentsResponse { version }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsResponse_destroy (ffi : * mut example_traits_transport_transport_request_GetDocumentsResponse) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsResponse_get_version (obj : * const example_traits_transport_transport_request_GetDocumentsResponse) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsResponse_set_version (obj : * mut example_traits_transport_transport_request_GetDocumentsResponse , value : u32) { (* obj) . version = value ; } # [doc = "FFI-representation of the [`GetDocumentsRequest`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_GetDocumentsRequest { pub version : u32 } impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: GetDocumentsRequest > for example_traits_transport_transport_request_GetDocumentsRequest { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_GetDocumentsRequest) -> example_traits :: transport :: transport_request :: GetDocumentsRequest { let ffi_ref = & * ffi ; example_traits :: transport :: transport_request :: GetDocumentsRequest { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: GetDocumentsRequest > for example_traits_transport_transport_request_GetDocumentsRequest { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: GetDocumentsRequest) -> * const example_traits_transport_transport_request_GetDocumentsRequest { ferment :: boxed (example_traits_transport_transport_request_GetDocumentsRequest { version : obj . version }) } } impl Drop for example_traits_transport_transport_request_GetDocumentsRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsRequest_ctor (version : u32) -> * mut example_traits_transport_transport_request_GetDocumentsRequest { ferment :: boxed (example_traits_transport_transport_request_GetDocumentsRequest { version }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsRequest_destroy (ffi : * mut example_traits_transport_transport_request_GetDocumentsRequest) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsRequest_get_version (obj : * const example_traits_transport_transport_request_GetDocumentsRequest) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_GetDocumentsRequest_set_version (obj : * mut example_traits_transport_transport_request_GetDocumentsRequest , value : u32) { (* obj) . version = value ; } # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`Status`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum example_traits_transport_transport_request_Status { Error , Success } impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: Status > for example_traits_transport_transport_request_Status { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_Status) -> example_traits :: transport :: transport_request :: Status { let ffi_ref = & * ffi ; match ffi_ref { example_traits_transport_transport_request_Status :: Error => example_traits :: transport :: transport_request :: Status :: Error , example_traits_transport_transport_request_Status :: Success => example_traits :: transport :: transport_request :: Status :: Success } } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: Status > for example_traits_transport_transport_request_Status { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: Status) -> * const example_traits_transport_transport_request_Status { ferment :: boxed (match obj { example_traits :: transport :: transport_request :: Status :: Error => example_traits_transport_transport_request_Status :: Error , example_traits :: transport :: transport_request :: Status :: Success => example_traits_transport_transport_request_Status :: Success , _ => unreachable ! ("This is unreachable") }) } } impl Drop for example_traits_transport_transport_request_Status { fn drop (& mut self) { unsafe { match self { example_traits_transport_transport_request_Status :: Error => { } , example_traits_transport_transport_request_Status :: Success => { } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Status_Error_ctor () -> * mut example_traits_transport_transport_request_Status { ferment :: boxed (example_traits_transport_transport_request_Status :: Error { }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Status_Success_ctor () -> * mut example_traits_transport_transport_request_Status { ferment :: boxed (example_traits_transport_transport_request_Status :: Success { }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Status_destroy (ffi : * mut example_traits_transport_transport_request_Status) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`DocumentQuery`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_DocumentQuery { pub version : u32 } impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: DocumentQuery > for example_traits_transport_transport_request_DocumentQuery { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_DocumentQuery) -> example_traits :: transport :: transport_request :: DocumentQuery { let ffi_ref = & * ffi ; example_traits :: transport :: transport_request :: DocumentQuery { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: DocumentQuery > for example_traits_transport_transport_request_DocumentQuery { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: DocumentQuery) -> * const example_traits_transport_transport_request_DocumentQuery { ferment :: boxed (example_traits_transport_transport_request_DocumentQuery { version : obj . version }) } } impl Drop for example_traits_transport_transport_request_DocumentQuery { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_DocumentQuery_ctor (version : u32) -> * mut example_traits_transport_transport_request_DocumentQuery { ferment :: boxed (example_traits_transport_transport_request_DocumentQuery { version }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_DocumentQuery_destroy (ffi : * mut example_traits_transport_transport_request_DocumentQuery) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_DocumentQuery_get_version (obj : * const example_traits_transport_transport_request_DocumentQuery) -> u32 { (* obj) . version } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_DocumentQuery_set_version (obj : * mut example_traits_transport_transport_request_DocumentQuery , value : u32) { (* obj) . version = value ; } # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_CanRetry { object : * const () , vtable : * const example_traits_transport_transport_request_CanRetry_VTable } # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_CanRetry_VTable { # [doc = "FFI-representation of the [`example_traits::transport::transport_request::CanRetry::can_retry`]"] pub can_retry : unsafe extern "C" fn (self_ : * mut crate :: fermented :: types :: example_traits :: transport :: transport_request :: example_traits_transport_transport_request_CanRetry) -> bool } # [doc = "FFI-representation of the [`Uri`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_transport_transport_request_Uri { pub scheme : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < example_traits :: transport :: transport_request :: Uri > for example_traits_transport_transport_request_Uri { unsafe fn ffi_from_const (ffi : * const example_traits_transport_transport_request_Uri) -> example_traits :: transport :: transport_request :: Uri { let ffi_ref = & * ffi ; example_traits :: transport :: transport_request :: Uri { scheme : < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . scheme) } } } impl ferment :: FFIConversionTo < example_traits :: transport :: transport_request :: Uri > for example_traits_transport_transport_request_Uri { unsafe fn ffi_to_const (obj : example_traits :: transport :: transport_request :: Uri) -> * const example_traits_transport_transport_request_Uri { ferment :: boxed (example_traits_transport_transport_request_Uri { scheme : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . scheme) }) } } impl Drop for example_traits_transport_transport_request_Uri { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_string (ffi_ref . scheme) ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Uri_ctor (scheme : * mut std :: os :: raw :: c_char) -> * mut example_traits_transport_transport_request_Uri { ferment :: boxed (example_traits_transport_transport_request_Uri { scheme }) } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Uri_destroy (ffi : * mut example_traits_transport_transport_request_Uri) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Uri_get_scheme (obj : * const example_traits_transport_transport_request_Uri) -> * mut std :: os :: raw :: c_char { (* obj) . scheme } # [no_mangle] pub unsafe extern "C" fn example_traits_transport_transport_request_Uri_set_scheme (obj : * mut example_traits_transport_transport_request_Uri , value : * mut std :: os :: raw :: c_char) { (* obj) . scheme = value ; } } } pub mod from_proof { use crate as example_traits_nested ; pub mod from_proof { use crate as example_traits_nested ; # [doc = "FFI-representation of the [`GetIdentityByPublicKeyHashRequest`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { } impl ferment :: FFIConversionFrom < example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest > for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { unsafe fn ffi_from_const (ffi : * const example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest) -> example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest { let ffi_ref = & * ffi ; example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest { } } } impl ferment :: FFIConversionTo < example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest > for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { unsafe fn ffi_to_const (obj : example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequest) -> * const example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { ferment :: boxed (example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { }) } } impl Drop for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest_ctor () -> * mut example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { ferment :: boxed (example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest { }) } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest_destroy (ffi : * mut example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequest) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`Identity`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_from_proof_from_proof_Identity { pub platform_version : u32 } impl ferment :: FFIConversionFrom < example_traits :: from_proof :: from_proof :: Identity > for example_traits_from_proof_from_proof_Identity { unsafe fn ffi_from_const (ffi : * const example_traits_from_proof_from_proof_Identity) -> example_traits :: from_proof :: from_proof :: Identity { let ffi_ref = & * ffi ; example_traits :: from_proof :: from_proof :: Identity { platform_version : ffi_ref . platform_version } } } impl ferment :: FFIConversionTo < example_traits :: from_proof :: from_proof :: Identity > for example_traits_from_proof_from_proof_Identity { unsafe fn ffi_to_const (obj : example_traits :: from_proof :: from_proof :: Identity) -> * const example_traits_from_proof_from_proof_Identity { ferment :: boxed (example_traits_from_proof_from_proof_Identity { platform_version : obj . platform_version }) } } impl Drop for example_traits_from_proof_from_proof_Identity { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_Identity_ctor (platform_version : u32) -> * mut example_traits_from_proof_from_proof_Identity { ferment :: boxed (example_traits_from_proof_from_proof_Identity { platform_version }) } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_Identity_destroy (ffi : * mut example_traits_from_proof_from_proof_Identity) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_Identity_get_platform_version (obj : * const example_traits_from_proof_from_proof_Identity) -> u32 { (* obj) . platform_version } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_Identity_set_platform_version (obj : * mut example_traits_from_proof_from_proof_Identity , value : u32) { (* obj) . platform_version = value ; } # [doc = "FFI-representation of the [`GetIdentityByPublicKeyHashRequestInit`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { } impl ferment :: FFIConversionFrom < example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit > for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { unsafe fn ffi_from_const (ffi : * const example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit) -> example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit { let ffi_ref = & * ffi ; example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit { } } } impl ferment :: FFIConversionTo < example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit > for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { unsafe fn ffi_to_const (obj : example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashRequestInit) -> * const example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { ferment :: boxed (example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { }) } } impl Drop for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit_ctor () -> * mut example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { ferment :: boxed (example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit { }) } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit_destroy (ffi : * mut example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashRequestInit) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`GetIdentityByPublicKeyHashResponse`]"] # [repr (C)] # [derive (Clone)] pub struct example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { } impl ferment :: FFIConversionFrom < example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse > for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { unsafe fn ffi_from_const (ffi : * const example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse) -> example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse { let ffi_ref = & * ffi ; example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse { } } } impl ferment :: FFIConversionTo < example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse > for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { unsafe fn ffi_to_const (obj : example_traits :: from_proof :: from_proof :: GetIdentityByPublicKeyHashResponse) -> * const example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { ferment :: boxed (example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { }) } } impl Drop for example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse_ctor () -> * mut example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { ferment :: boxed (example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse { }) } # [no_mangle] pub unsafe extern "C" fn example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse_destroy (ffi : * mut example_traits_from_proof_from_proof_GetIdentityByPublicKeyHashResponse) { ferment :: unbox_any (ffi) ; } } } pub mod nested { use crate as example_traits_nested ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ProtocolError`]\"`]"] # [repr (C)] # [derive (Clone)] # [non_exhaustive] pub enum example_traits_nested_ProtocolError { IdentifierError (* mut std :: os :: raw :: c_char) , Unknown (u32) } impl ferment :: FFIConversionFrom < example_traits :: nested :: ProtocolError > for example_traits_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const example_traits_nested_ProtocolError) -> example_traits :: nested :: ProtocolError { let ffi_ref = & * ffi ; match ffi_ref { example_traits_nested_ProtocolError :: IdentifierError (o_0) => example_traits :: nested :: ProtocolError :: IdentifierError (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* o_0)) , example_traits_nested_ProtocolError :: Unknown (o_0) => example_traits :: nested :: ProtocolError :: Unknown (* o_0) } } } impl ferment :: FFIConversionTo < example_traits :: nested :: ProtocolError > for example_traits_nested_ProtocolError { unsafe fn ffi_to_const (obj : example_traits :: nested :: ProtocolError) -> * const example_traits_nested_ProtocolError { ferment :: boxed (match obj { example_traits :: nested :: ProtocolError :: IdentifierError (o_0) => example_traits_nested_ProtocolError :: IdentifierError (< std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_0)) , example_traits :: nested :: ProtocolError :: Unknown (o_0) => example_traits_nested_ProtocolError :: Unknown (o_0) , _ => unreachable ! ("This is unreachable") }) } } impl Drop for example_traits_nested_ProtocolError { fn drop (& mut self) { unsafe { match self { example_traits_nested_ProtocolError :: IdentifierError (o_0) => { ferment :: unbox_string (* o_0) ; } , example_traits_nested_ProtocolError :: Unknown (o_0) => { ; } , _ => unreachable ! ("This is unreachable") } ; } } } # [no_mangle] pub unsafe extern "C" fn example_traits_nested_ProtocolError_IdentifierError_ctor (o_o_0 : * mut std :: os :: raw :: c_char) -> * mut example_traits_nested_ProtocolError { ferment :: boxed (example_traits_nested_ProtocolError :: IdentifierError (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn example_traits_nested_ProtocolError_Unknown_ctor (o_o_0 : u32) -> * mut example_traits_nested_ProtocolError { ferment :: boxed (example_traits_nested_ProtocolError :: Unknown (o_o_0)) } # [no_mangle] pub unsafe extern "C" fn example_traits_nested_ProtocolError_destroy (ffi : * mut example_traits_nested_ProtocolError) { ferment :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`example_traits::nested::pair_err`]"] # [no_mangle] pub unsafe extern "C" fn example_traits_nested_pair_err (err : * mut crate :: fermented :: generics :: Slice_example_traits_nested_ProtocolError) { let obj = example_traits :: nested :: pair_err (Box :: leak (Box :: new (< crate :: fermented :: generics :: Slice_example_traits_nested_ProtocolError as ferment :: FFIConversionFrom < Vec < example_traits :: nested :: ProtocolError > >> :: ffi_from (err)))) ; ; } # [doc = "FFI-representation of the [`example_traits::nested::pair_simple_err`]"] # [no_mangle] pub unsafe extern "C" fn example_traits_nested_pair_simple_err (err : * mut crate :: fermented :: generics :: std_collections_Map_keys_String_values_u32) { let obj = example_traits :: nested :: pair_simple_err (< crate :: fermented :: generics :: std_collections_Map_keys_String_values_u32 as ferment :: FFIConversionFrom < std :: collections :: HashMap < String , u32 > >> :: ffi_from (err)) ; ; } } } pub mod example_traits_nested { use crate as example_traits_nested ; } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as example_traits_nested ; # [repr (C)] # [derive (Clone)] pub struct Slice_example_traits_nested_ProtocolError { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: example_traits :: nested :: example_traits_nested_ProtocolError } impl ferment :: FFIConversionFrom < Vec < example_traits :: nested :: ProtocolError > > for Slice_example_traits_nested_ProtocolError { unsafe fn ffi_from_const (ffi : * const Slice_example_traits_nested_ProtocolError) -> Vec < example_traits :: nested :: ProtocolError > { let ffi_ref = & * ffi ; ferment :: from_group (ffi_ref . count , ffi_ref . values , | o | < crate :: fermented :: types :: example_traits :: nested :: example_traits_nested_ProtocolError as ferment :: FFIConversionFrom < example_traits :: nested :: ProtocolError >> :: ffi_from (* o)) } } impl ferment :: FFIConversionTo < Vec < example_traits :: nested :: ProtocolError > > for Slice_example_traits_nested_ProtocolError { unsafe fn ffi_to_const (obj : Vec < example_traits :: nested :: ProtocolError >) -> * const Slice_example_traits_nested_ProtocolError { let count = obj . len () ; let values = ferment :: to_group (obj . into_iter () , | o | < crate :: fermented :: types :: example_traits :: nested :: example_traits_nested_ProtocolError as ferment :: FFIConversionTo < example_traits :: nested :: ProtocolError >> :: ffi_to (o)) ; ferment :: boxed (Self { count , values }) } } impl Drop for Slice_example_traits_nested_ProtocolError { fn drop (& mut self) { unsafe { unsafe { ferment :: unbox_group (self . values , self . count , | o | ferment :: unbox_any (o)) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn Slice_example_traits_nested_ProtocolError_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: example_traits :: nested :: example_traits_nested_ProtocolError) -> * mut Slice_example_traits_nested_ProtocolError { ferment :: boxed (Slice_example_traits_nested_ProtocolError { count , values }) } # [no_mangle] pub unsafe extern "C" fn Slice_example_traits_nested_ProtocolError_destroy (ffi : * mut Slice_example_traits_nested_ProtocolError) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn Slice_example_traits_nested_ProtocolError_value_at_index (ffi : * const Slice_example_traits_nested_ProtocolError , index : usize) -> * mut crate :: fermented :: types :: example_traits :: nested :: example_traits_nested_ProtocolError { * (* ffi) . values . add (index) } # [no_mangle] pub unsafe extern "C" fn Slice_example_traits_nested_ProtocolError_set_value_at_index (ffi : * mut Slice_example_traits_nested_ProtocolError , index : usize , value : * mut crate :: fermented :: types :: example_traits :: nested :: example_traits_nested_ProtocolError) { * (* ffi) . values . add (index) = value } # [repr (C)] # [derive (Clone)] pub struct std_collections_Map_keys_String_values_u32 { pub count : usize , pub keys : * mut * mut std :: os :: raw :: c_char , pub values : * mut u32 } impl ferment :: FFIConversionFrom < std :: collections :: HashMap < String , u32 > > for std_collections_Map_keys_String_values_u32 { unsafe fn ffi_from_const (ffi : * const std_collections_Map_keys_String_values_u32) -> std :: collections :: HashMap < String , u32 > { let ffi_ref = & * ffi ; ferment :: fold_to_map (ffi_ref . count , ffi_ref . keys , ffi_ref . values , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (o) , | o | o) } } impl ferment :: FFIConversionTo < std :: collections :: HashMap < String , u32 > > for std_collections_Map_keys_String_values_u32 { unsafe fn ffi_to_const (obj : std :: collections :: HashMap < String , u32 >) -> * const std_collections_Map_keys_String_values_u32 { let (count , keys , values) = ferment :: to_map (obj , | o | < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o) , | o | o) ; ferment :: boxed (Self { count , keys , values }) } } impl Drop for std_collections_Map_keys_String_values_u32 { fn drop (& mut self) { unsafe { unsafe { ferment :: unbox_group (self . keys , self . count , | o | ferment :: unbox_string (o)) ; ferment :: unbox_group (self . values , self . count , | o | ferment :: black_hole (o)) ; } ; } } } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_u32_ctor (count : usize , keys : * mut * mut std :: os :: raw :: c_char , values : * mut u32) -> * mut std_collections_Map_keys_String_values_u32 { ferment :: boxed (std_collections_Map_keys_String_values_u32 { count , keys , values }) } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_u32_destroy (ffi : * mut std_collections_Map_keys_String_values_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_u32_value_by_key (ffi : * const std_collections_Map_keys_String_values_u32 , key : * mut std :: os :: raw :: c_char) -> * mut u32 { let ffi_ref = & * ffi ; let key_rust = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (key) ; for i in 0 .. ffi_ref . count { let k_val = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* ffi_ref . keys . add (i)) ; if key_rust == k_val { return ferment :: boxed (* ffi_ref . values . add (i)) ; } } std :: ptr :: null_mut () } # [no_mangle] pub unsafe extern "C" fn std_collections_Map_keys_String_values_u32_set_value_for_key (ffi : * mut std_collections_Map_keys_String_values_u32 , key : * mut std :: os :: raw :: c_char , value : u32) { let ffi_ref = & * ffi ; let target_key = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (key) ; for i in 0 .. ffi_ref . count { let candidate_key = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (* ffi_ref . keys . add (i)) ; if candidate_key . eq (& target_key) { let slot = (* ffi) . values . add (i) ; let old = * slot ; * slot = value ; break ; } } } }