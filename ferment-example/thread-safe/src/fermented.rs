# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod example_thread_safe { use crate as example_thread_safe ; pub mod entry { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`example_thread_safe::entry::PlatformProvider::new`]"] # [no_mangle] pub unsafe extern "C" fn example_thread_safe_entry_PlatformProvider_new (context : * mut crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: PlatformProvider { let obj = example_thread_safe :: entry :: PlatformProvider :: new (< crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (context)) ; ferment :: boxed (obj) } } pub mod primitives { use crate as example_thread_safe ; pub mod rwlock { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`RwLockExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_rwlock_RwLockExample { pub simple : * mut crate :: fermented :: generics :: std_sync_RwLock_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_RwLock_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: rwlock :: RwLockExample > for example_thread_safe_primitives_rwlock_RwLockExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_rwlock_RwLockExample) -> example_thread_safe :: primitives :: rwlock :: RwLockExample { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: rwlock :: RwLockExample { simple : < crate :: fermented :: generics :: std_sync_RwLock_u32 as ferment :: FFIConversionFrom < std :: sync :: RwLock < u32 > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_RwLock_String as ferment :: FFIConversionFrom < std :: sync :: RwLock < String > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: rwlock :: RwLockExample > for example_thread_safe_primitives_rwlock_RwLockExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: rwlock :: RwLockExample) -> * const example_thread_safe_primitives_rwlock_RwLockExample { ferment :: boxed (example_thread_safe_primitives_rwlock_RwLockExample { simple : < crate :: fermented :: generics :: std_sync_RwLock_u32 as ferment :: FFIConversionTo < std :: sync :: RwLock < u32 > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_RwLock_String as ferment :: FFIConversionTo < std :: sync :: RwLock < String > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque) }) } } impl Drop for example_thread_safe_primitives_rwlock_RwLockExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_RwLock_u32 , complex : * mut crate :: fermented :: generics :: std_sync_RwLock_String , opaque : * mut crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_rwlock_RwLockExample { ferment :: boxed (example_thread_safe_primitives_rwlock_RwLockExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_destroy < > (ffi : * mut example_thread_safe_primitives_rwlock_RwLockExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_get_simple < > (obj : * const example_thread_safe_primitives_rwlock_RwLockExample) -> * mut crate :: fermented :: generics :: std_sync_RwLock_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_get_complex < > (obj : * const example_thread_safe_primitives_rwlock_RwLockExample) -> * mut crate :: fermented :: generics :: std_sync_RwLock_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_get_opaque < > (obj : * const example_thread_safe_primitives_rwlock_RwLockExample) -> * mut crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_set_simple < > (obj : * mut example_thread_safe_primitives_rwlock_RwLockExample , value : * mut crate :: fermented :: generics :: std_sync_RwLock_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_set_complex < > (obj : * mut example_thread_safe_primitives_rwlock_RwLockExample , value : * mut crate :: fermented :: generics :: std_sync_RwLock_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_RwLockExample_set_opaque < > (obj : * mut example_thread_safe_primitives_rwlock_RwLockExample , value : * mut crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } # [doc = "FFI-representation of the [`ArcRwLockExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_rwlock_ArcRwLockExample { pub simple : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: rwlock :: ArcRwLockExample > for example_thread_safe_primitives_rwlock_ArcRwLockExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_rwlock_ArcRwLockExample) -> example_thread_safe :: primitives :: rwlock :: ArcRwLockExample { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: rwlock :: ArcRwLockExample { simple : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < u32 > > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < String > > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: rwlock :: ArcRwLockExample > for example_thread_safe_primitives_rwlock_ArcRwLockExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: rwlock :: ArcRwLockExample) -> * const example_thread_safe_primitives_rwlock_ArcRwLockExample { ferment :: boxed (example_thread_safe_primitives_rwlock_ArcRwLockExample { simple : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < u32 > > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < String > > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque) }) } } impl Drop for example_thread_safe_primitives_rwlock_ArcRwLockExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 , complex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String , opaque : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_rwlock_ArcRwLockExample { ferment :: boxed (example_thread_safe_primitives_rwlock_ArcRwLockExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_destroy < > (ffi : * mut example_thread_safe_primitives_rwlock_ArcRwLockExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_get_simple < > (obj : * const example_thread_safe_primitives_rwlock_ArcRwLockExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_get_complex < > (obj : * const example_thread_safe_primitives_rwlock_ArcRwLockExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_get_opaque < > (obj : * const example_thread_safe_primitives_rwlock_ArcRwLockExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_set_simple < > (obj : * mut example_thread_safe_primitives_rwlock_ArcRwLockExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_set_complex < > (obj : * mut example_thread_safe_primitives_rwlock_ArcRwLockExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rwlock_ArcRwLockExample_set_opaque < > (obj : * mut example_thread_safe_primitives_rwlock_ArcRwLockExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } } pub mod arc { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`ArcExamples`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_arc_ArcExamples { pub simple : * mut crate :: fermented :: generics :: std_sync_Arc_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_Arc_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext , pub opaque_mutex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext , pub opaque_rwlock : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: arc :: ArcExamples > for example_thread_safe_primitives_arc_ArcExamples { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_arc_ArcExamples) -> example_thread_safe :: primitives :: arc :: ArcExamples { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: arc :: ArcExamples { simple : < crate :: fermented :: generics :: std_sync_Arc_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < u32 > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_String as ferment :: FFIConversionFrom < std :: sync :: Arc < String > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque) , opaque_mutex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque_mutex) , opaque_rwlock : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque_rwlock) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: arc :: ArcExamples > for example_thread_safe_primitives_arc_ArcExamples { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: arc :: ArcExamples) -> * const example_thread_safe_primitives_arc_ArcExamples { ferment :: boxed (example_thread_safe_primitives_arc_ArcExamples { simple : < crate :: fermented :: generics :: std_sync_Arc_u32 as ferment :: FFIConversionTo < std :: sync :: Arc < u32 > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_String as ferment :: FFIConversionTo < std :: sync :: Arc < String > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Arc < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque) , opaque_mutex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque_mutex) , opaque_rwlock : < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque_rwlock) }) } } impl Drop for example_thread_safe_primitives_arc_ArcExamples { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; ferment :: unbox_any (ffi_ref . opaque_mutex) ; ferment :: unbox_any (ffi_ref . opaque_rwlock) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_Arc_u32 , complex : * mut crate :: fermented :: generics :: std_sync_Arc_String , opaque : * mut crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext , opaque_mutex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext , opaque_rwlock : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_arc_ArcExamples { ferment :: boxed (example_thread_safe_primitives_arc_ArcExamples { simple , complex , opaque , opaque_mutex , opaque_rwlock }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_destroy < > (ffi : * mut example_thread_safe_primitives_arc_ArcExamples) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_get_simple < > (obj : * const example_thread_safe_primitives_arc_ArcExamples) -> * mut crate :: fermented :: generics :: std_sync_Arc_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_get_complex < > (obj : * const example_thread_safe_primitives_arc_ArcExamples) -> * mut crate :: fermented :: generics :: std_sync_Arc_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_get_opaque < > (obj : * const example_thread_safe_primitives_arc_ArcExamples) -> * mut crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_get_opaque_mutex < > (obj : * const example_thread_safe_primitives_arc_ArcExamples) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { (* obj) . opaque_mutex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_get_opaque_rwlock < > (obj : * const example_thread_safe_primitives_arc_ArcExamples) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { (* obj) . opaque_rwlock } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_set_simple < > (obj : * mut example_thread_safe_primitives_arc_ArcExamples , value : * mut crate :: fermented :: generics :: std_sync_Arc_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_set_complex < > (obj : * mut example_thread_safe_primitives_arc_ArcExamples , value : * mut crate :: fermented :: generics :: std_sync_Arc_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_set_opaque < > (obj : * mut example_thread_safe_primitives_arc_ArcExamples , value : * mut crate :: fermented :: generics :: std_sync_Arc_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_set_opaque_mutex < > (obj : * mut example_thread_safe_primitives_arc_ArcExamples , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext) { (* obj) . opaque_mutex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_arc_ArcExamples_set_opaque_rwlock < > (obj : * mut example_thread_safe_primitives_arc_ArcExamples , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) { (* obj) . opaque_rwlock = value ; } } pub mod cow { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`CowExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_cow_CowExample { pub simple : u16 , pub complex : * mut std :: os :: raw :: c_char , pub opaque : * mut example_thread_safe :: entry :: FFIContext } impl < 'a , > ferment :: FFIConversionFrom < example_thread_safe :: primitives :: cow :: CowExample < 'a > > for example_thread_safe_primitives_cow_CowExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_cow_CowExample) -> example_thread_safe :: primitives :: cow :: CowExample < 'a > { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: cow :: CowExample { simple : std :: borrow :: Cow :: Owned (ffi_ref . simple) , complex : std :: borrow :: Cow :: Owned (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_ref . complex)) , opaque : std :: borrow :: Cow :: Owned (std :: ptr :: read (ffi_ref . opaque)) } } } impl < 'a , > ferment :: FFIConversionTo < example_thread_safe :: primitives :: cow :: CowExample < 'a > > for example_thread_safe_primitives_cow_CowExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: cow :: CowExample < 'a >) -> * const example_thread_safe_primitives_cow_CowExample { ferment :: boxed (example_thread_safe_primitives_cow_CowExample { simple : obj . simple . into_owned () , complex : < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . complex . into_owned ()) , opaque : ferment :: boxed (obj . opaque . into_owned ()) }) } } impl Drop for example_thread_safe_primitives_cow_CowExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_ctor < 'a > (simple : u16 , complex : * mut std :: os :: raw :: c_char , opaque : * mut example_thread_safe :: entry :: FFIContext) -> * mut example_thread_safe_primitives_cow_CowExample { ferment :: boxed (example_thread_safe_primitives_cow_CowExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_destroy < 'a > (ffi : * mut example_thread_safe_primitives_cow_CowExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_get_simple < 'a > (obj : * const example_thread_safe_primitives_cow_CowExample) -> u16 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_get_complex < 'a > (obj : * const example_thread_safe_primitives_cow_CowExample) -> * mut std :: os :: raw :: c_char { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_get_opaque < 'a > (obj : * const example_thread_safe_primitives_cow_CowExample) -> * mut example_thread_safe :: entry :: FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_set_simple < 'a > (obj : * mut example_thread_safe_primitives_cow_CowExample , value : u16) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_set_complex < 'a > (obj : * mut example_thread_safe_primitives_cow_CowExample , value : * mut std :: os :: raw :: c_char) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_cow_CowExample_set_opaque < 'a > (obj : * mut example_thread_safe_primitives_cow_CowExample , value : * mut example_thread_safe :: entry :: FFIContext) { (* obj) . opaque = value ; } } pub mod mutex { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`MutexExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_mutex_MutexExample { pub simple : * mut crate :: fermented :: generics :: std_sync_Mutex_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_Mutex_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: mutex :: MutexExample > for example_thread_safe_primitives_mutex_MutexExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_mutex_MutexExample) -> example_thread_safe :: primitives :: mutex :: MutexExample { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: mutex :: MutexExample { simple : < crate :: fermented :: generics :: std_sync_Mutex_u32 as ferment :: FFIConversionFrom < std :: sync :: Mutex < u32 > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_Mutex_String as ferment :: FFIConversionFrom < std :: sync :: Mutex < String > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: mutex :: MutexExample > for example_thread_safe_primitives_mutex_MutexExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: mutex :: MutexExample) -> * const example_thread_safe_primitives_mutex_MutexExample { ferment :: boxed (example_thread_safe_primitives_mutex_MutexExample { simple : < crate :: fermented :: generics :: std_sync_Mutex_u32 as ferment :: FFIConversionTo < std :: sync :: Mutex < u32 > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_Mutex_String as ferment :: FFIConversionTo < std :: sync :: Mutex < String > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque) }) } } impl Drop for example_thread_safe_primitives_mutex_MutexExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_Mutex_u32 , complex : * mut crate :: fermented :: generics :: std_sync_Mutex_String , opaque : * mut crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_mutex_MutexExample { ferment :: boxed (example_thread_safe_primitives_mutex_MutexExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_destroy < > (ffi : * mut example_thread_safe_primitives_mutex_MutexExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_get_simple < > (obj : * const example_thread_safe_primitives_mutex_MutexExample) -> * mut crate :: fermented :: generics :: std_sync_Mutex_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_get_complex < > (obj : * const example_thread_safe_primitives_mutex_MutexExample) -> * mut crate :: fermented :: generics :: std_sync_Mutex_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_get_opaque < > (obj : * const example_thread_safe_primitives_mutex_MutexExample) -> * mut crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_set_simple < > (obj : * mut example_thread_safe_primitives_mutex_MutexExample , value : * mut crate :: fermented :: generics :: std_sync_Mutex_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_set_complex < > (obj : * mut example_thread_safe_primitives_mutex_MutexExample , value : * mut crate :: fermented :: generics :: std_sync_Mutex_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_MutexExample_set_opaque < > (obj : * mut example_thread_safe_primitives_mutex_MutexExample , value : * mut crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } # [doc = "FFI-representation of the [`ArcMutexExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_mutex_ArcMutexExample { pub simple : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: mutex :: ArcMutexExample > for example_thread_safe_primitives_mutex_ArcMutexExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_mutex_ArcMutexExample) -> example_thread_safe :: primitives :: mutex :: ArcMutexExample { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: mutex :: ArcMutexExample { simple : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < u32 > > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < String > > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: mutex :: ArcMutexExample > for example_thread_safe_primitives_mutex_ArcMutexExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: mutex :: ArcMutexExample) -> * const example_thread_safe_primitives_mutex_ArcMutexExample { ferment :: boxed (example_thread_safe_primitives_mutex_ArcMutexExample { simple : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < u32 > > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < String > > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque) }) } } impl Drop for example_thread_safe_primitives_mutex_ArcMutexExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 , complex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String , opaque : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_mutex_ArcMutexExample { ferment :: boxed (example_thread_safe_primitives_mutex_ArcMutexExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_destroy < > (ffi : * mut example_thread_safe_primitives_mutex_ArcMutexExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_get_simple < > (obj : * const example_thread_safe_primitives_mutex_ArcMutexExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_get_complex < > (obj : * const example_thread_safe_primitives_mutex_ArcMutexExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_get_opaque < > (obj : * const example_thread_safe_primitives_mutex_ArcMutexExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_set_simple < > (obj : * mut example_thread_safe_primitives_mutex_ArcMutexExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_set_complex < > (obj : * mut example_thread_safe_primitives_mutex_ArcMutexExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_mutex_ArcMutexExample_set_opaque < > (obj : * mut example_thread_safe_primitives_mutex_ArcMutexExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } } pub mod rc { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`CellExamples`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_rc_CellExamples { pub simple_cell : * mut crate :: fermented :: generics :: std_cell_Cell_u32 , pub simple_rc_cell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 , pub complex_cell : * mut crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType , pub complex_rc_cell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: rc :: CellExamples > for example_thread_safe_primitives_rc_CellExamples { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_rc_CellExamples) -> example_thread_safe :: primitives :: rc :: CellExamples { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: rc :: CellExamples { simple_cell : < crate :: fermented :: generics :: std_cell_Cell_u32 as ferment :: FFIConversionFrom < std :: cell :: Cell < u32 > >> :: ffi_from (ffi_ref . simple_cell) , simple_rc_cell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < u32 > > >> :: ffi_from (ffi_ref . simple_rc_cell) , complex_cell : < crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionFrom < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > >> :: ffi_from (ffi_ref . complex_cell) , complex_rc_cell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > >> :: ffi_from (ffi_ref . complex_rc_cell) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: rc :: CellExamples > for example_thread_safe_primitives_rc_CellExamples { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: rc :: CellExamples) -> * const example_thread_safe_primitives_rc_CellExamples { ferment :: boxed (example_thread_safe_primitives_rc_CellExamples { simple_cell : < crate :: fermented :: generics :: std_cell_Cell_u32 as ferment :: FFIConversionTo < std :: cell :: Cell < u32 > >> :: ffi_to (obj . simple_cell) , simple_rc_cell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: Cell < u32 > > >> :: ffi_to (obj . simple_rc_cell) , complex_cell : < crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionTo < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > >> :: ffi_to (obj . complex_cell) , complex_rc_cell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > >> :: ffi_to (obj . complex_rc_cell) }) } } impl Drop for example_thread_safe_primitives_rc_CellExamples { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple_cell) ; ferment :: unbox_any (ffi_ref . simple_rc_cell) ; ferment :: unbox_any (ffi_ref . complex_cell) ; ferment :: unbox_any (ffi_ref . complex_rc_cell) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_ctor < > (simple_cell : * mut crate :: fermented :: generics :: std_cell_Cell_u32 , simple_rc_cell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 , complex_cell : * mut crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType , complex_rc_cell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) -> * mut example_thread_safe_primitives_rc_CellExamples { ferment :: boxed (example_thread_safe_primitives_rc_CellExamples { simple_cell , simple_rc_cell , complex_cell , complex_rc_cell }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_destroy < > (ffi : * mut example_thread_safe_primitives_rc_CellExamples) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_get_simple_cell < > (obj : * const example_thread_safe_primitives_rc_CellExamples) -> * mut crate :: fermented :: generics :: std_cell_Cell_u32 { (* obj) . simple_cell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_get_simple_rc_cell < > (obj : * const example_thread_safe_primitives_rc_CellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 { (* obj) . simple_rc_cell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_get_complex_cell < > (obj : * const example_thread_safe_primitives_rc_CellExamples) -> * mut crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { (* obj) . complex_cell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_get_complex_rc_cell < > (obj : * const example_thread_safe_primitives_rc_CellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { (* obj) . complex_rc_cell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_set_simple_cell < > (obj : * mut example_thread_safe_primitives_rc_CellExamples , value : * mut crate :: fermented :: generics :: std_cell_Cell_u32) { (* obj) . simple_cell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_set_simple_rc_cell < > (obj : * mut example_thread_safe_primitives_rc_CellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32) { (* obj) . simple_rc_cell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_set_complex_cell < > (obj : * mut example_thread_safe_primitives_rc_CellExamples , value : * mut crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) { (* obj) . complex_cell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_CellExamples_set_complex_rc_cell < > (obj : * mut example_thread_safe_primitives_rc_CellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) { (* obj) . complex_rc_cell = value ; } # [doc = "FFI-representation of the [`UnsafeCellExamples`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_rc_UnsafeCellExamples { pub simple : * mut crate :: fermented :: generics :: std_rc_Rc_u32 , pub simple_refcell : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_u32 , pub simple_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 , pub complex : * mut crate :: fermented :: generics :: std_rc_Rc_String , pub complex_refcell : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_String , pub complex_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String , pub opaque : * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext , pub opaque_refcell : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext , pub opaque_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: rc :: UnsafeCellExamples > for example_thread_safe_primitives_rc_UnsafeCellExamples { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> example_thread_safe :: primitives :: rc :: UnsafeCellExamples { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: rc :: UnsafeCellExamples { simple : < crate :: fermented :: generics :: std_rc_Rc_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < u32 > >> :: ffi_from (ffi_ref . simple) , simple_refcell : < crate :: fermented :: generics :: std_cell_UnsafeCell_u32 as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < u32 > >> :: ffi_from (ffi_ref . simple_refcell) , simple_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > >> :: ffi_from (ffi_ref . simple_rc_refcell) , complex : < crate :: fermented :: generics :: std_rc_Rc_String as ferment :: FFIConversionFrom < std :: rc :: Rc < String > >> :: ffi_from (ffi_ref . complex) , complex_refcell : < crate :: fermented :: generics :: std_cell_UnsafeCell_String as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < String > >> :: ffi_from (ffi_ref . complex_refcell) , complex_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < String > > >> :: ffi_from (ffi_ref . complex_rc_refcell) , opaque : < crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque) , opaque_refcell : < crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque_refcell) , opaque_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque_rc_refcell) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: rc :: UnsafeCellExamples > for example_thread_safe_primitives_rc_UnsafeCellExamples { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: rc :: UnsafeCellExamples) -> * const example_thread_safe_primitives_rc_UnsafeCellExamples { ferment :: boxed (example_thread_safe_primitives_rc_UnsafeCellExamples { simple : < crate :: fermented :: generics :: std_rc_Rc_u32 as ferment :: FFIConversionTo < std :: rc :: Rc < u32 > >> :: ffi_to (obj . simple) , simple_refcell : < crate :: fermented :: generics :: std_cell_UnsafeCell_u32 as ferment :: FFIConversionTo < std :: cell :: UnsafeCell < u32 > >> :: ffi_to (obj . simple_refcell) , simple_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > >> :: ffi_to (obj . simple_rc_refcell) , complex : < crate :: fermented :: generics :: std_rc_Rc_String as ferment :: FFIConversionTo < std :: rc :: Rc < String > >> :: ffi_to (obj . complex) , complex_refcell : < crate :: fermented :: generics :: std_cell_UnsafeCell_String as ferment :: FFIConversionTo < std :: cell :: UnsafeCell < String > >> :: ffi_to (obj . complex_refcell) , complex_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: UnsafeCell < String > > >> :: ffi_to (obj . complex_rc_refcell) , opaque : < crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque) , opaque_refcell : < crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque_refcell) , opaque_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque_rc_refcell) }) } } impl Drop for example_thread_safe_primitives_rc_UnsafeCellExamples { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . simple_refcell) ; ferment :: unbox_any (ffi_ref . simple_rc_refcell) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . complex_refcell) ; ferment :: unbox_any (ffi_ref . complex_rc_refcell) ; ferment :: unbox_any (ffi_ref . opaque) ; ferment :: unbox_any (ffi_ref . opaque_refcell) ; ferment :: unbox_any (ffi_ref . opaque_rc_refcell) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_ctor < > (simple : * mut crate :: fermented :: generics :: std_rc_Rc_u32 , simple_refcell : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_u32 , simple_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 , complex : * mut crate :: fermented :: generics :: std_rc_Rc_String , complex_refcell : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_String , complex_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String , opaque : * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext , opaque_refcell : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext , opaque_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_rc_UnsafeCellExamples { ferment :: boxed (example_thread_safe_primitives_rc_UnsafeCellExamples { simple , simple_refcell , simple_rc_refcell , complex , complex_refcell , complex_rc_refcell , opaque , opaque_refcell , opaque_rc_refcell }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_destroy < > (ffi : * mut example_thread_safe_primitives_rc_UnsafeCellExamples) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_simple < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_simple_refcell < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_cell_UnsafeCell_u32 { (* obj) . simple_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_simple_rc_refcell < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 { (* obj) . simple_rc_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_complex < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_complex_refcell < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_cell_UnsafeCell_String { (* obj) . complex_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_complex_rc_refcell < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String { (* obj) . complex_rc_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_opaque < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_opaque_refcell < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { (* obj) . opaque_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_get_opaque_rc_refcell < > (obj : * const example_thread_safe_primitives_rc_UnsafeCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { (* obj) . opaque_rc_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_simple < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_simple_refcell < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_u32) { (* obj) . simple_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_simple_rc_refcell < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32) { (* obj) . simple_rc_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_complex < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_complex_refcell < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_String) { (* obj) . complex_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_complex_rc_refcell < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String) { (* obj) . complex_rc_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_opaque < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_opaque_refcell < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) { (* obj) . opaque_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_UnsafeCellExamples_set_opaque_rc_refcell < > (obj : * mut example_thread_safe_primitives_rc_UnsafeCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) { (* obj) . opaque_rc_refcell = value ; } # [doc = "FFI-representation of the [`RefCellExamples`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_rc_RefCellExamples { pub simple : * mut crate :: fermented :: generics :: std_rc_Rc_u32 , pub simple_refcell : * mut crate :: fermented :: generics :: std_cell_RefCell_u32 , pub simple_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 , pub complex : * mut crate :: fermented :: generics :: std_rc_Rc_String , pub complex_refcell : * mut crate :: fermented :: generics :: std_cell_RefCell_String , pub complex_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String , pub opaque : * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext , pub opaque_refcell : * mut crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext , pub opaque_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: rc :: RefCellExamples > for example_thread_safe_primitives_rc_RefCellExamples { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_rc_RefCellExamples) -> example_thread_safe :: primitives :: rc :: RefCellExamples { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: rc :: RefCellExamples { simple : < crate :: fermented :: generics :: std_rc_Rc_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < u32 > >> :: ffi_from (ffi_ref . simple) , simple_refcell : < crate :: fermented :: generics :: std_cell_RefCell_u32 as ferment :: FFIConversionFrom < std :: cell :: RefCell < u32 > >> :: ffi_from (ffi_ref . simple_refcell) , simple_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < u32 > > >> :: ffi_from (ffi_ref . simple_rc_refcell) , complex : < crate :: fermented :: generics :: std_rc_Rc_String as ferment :: FFIConversionFrom < std :: rc :: Rc < String > >> :: ffi_from (ffi_ref . complex) , complex_refcell : < crate :: fermented :: generics :: std_cell_RefCell_String as ferment :: FFIConversionFrom < std :: cell :: RefCell < String > >> :: ffi_from (ffi_ref . complex_refcell) , complex_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < String > > >> :: ffi_from (ffi_ref . complex_rc_refcell) , opaque : < crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque) , opaque_refcell : < crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque_refcell) , opaque_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque_rc_refcell) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: rc :: RefCellExamples > for example_thread_safe_primitives_rc_RefCellExamples { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: rc :: RefCellExamples) -> * const example_thread_safe_primitives_rc_RefCellExamples { ferment :: boxed (example_thread_safe_primitives_rc_RefCellExamples { simple : < crate :: fermented :: generics :: std_rc_Rc_u32 as ferment :: FFIConversionTo < std :: rc :: Rc < u32 > >> :: ffi_to (obj . simple) , simple_refcell : < crate :: fermented :: generics :: std_cell_RefCell_u32 as ferment :: FFIConversionTo < std :: cell :: RefCell < u32 > >> :: ffi_to (obj . simple_refcell) , simple_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: RefCell < u32 > > >> :: ffi_to (obj . simple_rc_refcell) , complex : < crate :: fermented :: generics :: std_rc_Rc_String as ferment :: FFIConversionTo < std :: rc :: Rc < String > >> :: ffi_to (obj . complex) , complex_refcell : < crate :: fermented :: generics :: std_cell_RefCell_String as ferment :: FFIConversionTo < std :: cell :: RefCell < String > >> :: ffi_to (obj . complex_refcell) , complex_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: RefCell < String > > >> :: ffi_to (obj . complex_rc_refcell) , opaque : < crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque) , opaque_refcell : < crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque_refcell) , opaque_rc_refcell : < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque_rc_refcell) }) } } impl Drop for example_thread_safe_primitives_rc_RefCellExamples { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . simple_refcell) ; ferment :: unbox_any (ffi_ref . simple_rc_refcell) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . complex_refcell) ; ferment :: unbox_any (ffi_ref . complex_rc_refcell) ; ferment :: unbox_any (ffi_ref . opaque) ; ferment :: unbox_any (ffi_ref . opaque_refcell) ; ferment :: unbox_any (ffi_ref . opaque_rc_refcell) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_ctor < > (simple : * mut crate :: fermented :: generics :: std_rc_Rc_u32 , simple_refcell : * mut crate :: fermented :: generics :: std_cell_RefCell_u32 , simple_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 , complex : * mut crate :: fermented :: generics :: std_rc_Rc_String , complex_refcell : * mut crate :: fermented :: generics :: std_cell_RefCell_String , complex_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String , opaque : * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext , opaque_refcell : * mut crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext , opaque_rc_refcell : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_rc_RefCellExamples { ferment :: boxed (example_thread_safe_primitives_rc_RefCellExamples { simple , simple_refcell , simple_rc_refcell , complex , complex_refcell , complex_rc_refcell , opaque , opaque_refcell , opaque_rc_refcell }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_destroy < > (ffi : * mut example_thread_safe_primitives_rc_RefCellExamples) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_simple < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_simple_refcell < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_cell_RefCell_u32 { (* obj) . simple_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_simple_rc_refcell < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 { (* obj) . simple_rc_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_complex < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_complex_refcell < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_cell_RefCell_String { (* obj) . complex_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_complex_rc_refcell < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String { (* obj) . complex_rc_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_opaque < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_opaque_refcell < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext { (* obj) . opaque_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_get_opaque_rc_refcell < > (obj : * const example_thread_safe_primitives_rc_RefCellExamples) -> * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { (* obj) . opaque_rc_refcell } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_simple < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_simple_refcell < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_cell_RefCell_u32) { (* obj) . simple_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_simple_rc_refcell < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32) { (* obj) . simple_rc_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_complex < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_complex_refcell < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_cell_RefCell_String) { (* obj) . complex_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_complex_rc_refcell < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String) { (* obj) . complex_rc_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_opaque < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_opaque_refcell < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext) { (* obj) . opaque_refcell = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_rc_RefCellExamples_set_opaque_rc_refcell < > (obj : * mut example_thread_safe_primitives_rc_RefCellExamples , value : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext) { (* obj) . opaque_rc_refcell = value ; } } pub mod oncelock { use crate as example_thread_safe ; # [doc = "FFI-representation of the [`ArcRwLockExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_oncelock_ArcRwLockExample { pub simple : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: oncelock :: ArcRwLockExample > for example_thread_safe_primitives_oncelock_ArcRwLockExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_oncelock_ArcRwLockExample) -> example_thread_safe :: primitives :: oncelock :: ArcRwLockExample { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: oncelock :: ArcRwLockExample { simple : < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < u32 > > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < String > > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (ffi_ref . opaque) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: oncelock :: ArcRwLockExample > for example_thread_safe_primitives_oncelock_ArcRwLockExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: oncelock :: ArcRwLockExample) -> * const example_thread_safe_primitives_oncelock_ArcRwLockExample { ferment :: boxed (example_thread_safe_primitives_oncelock_ArcRwLockExample { simple : < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: OnceLock < u32 > > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: OnceLock < String > > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_to (obj . opaque) }) } } impl Drop for example_thread_safe_primitives_oncelock_ArcRwLockExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 , complex : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String , opaque : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_oncelock_ArcRwLockExample { ferment :: boxed (example_thread_safe_primitives_oncelock_ArcRwLockExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_destroy < > (ffi : * mut example_thread_safe_primitives_oncelock_ArcRwLockExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_get_simple < > (obj : * const example_thread_safe_primitives_oncelock_ArcRwLockExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_get_complex < > (obj : * const example_thread_safe_primitives_oncelock_ArcRwLockExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_get_opaque < > (obj : * const example_thread_safe_primitives_oncelock_ArcRwLockExample) -> * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_set_simple < > (obj : * mut example_thread_safe_primitives_oncelock_ArcRwLockExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_set_complex < > (obj : * mut example_thread_safe_primitives_oncelock_ArcRwLockExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_ArcRwLockExample_set_opaque < > (obj : * mut example_thread_safe_primitives_oncelock_ArcRwLockExample , value : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } # [doc = "FFI-representation of the [`RwLockExample`]"] # [repr (C)] # [derive (Clone)] pub struct example_thread_safe_primitives_oncelock_RwLockExample { pub simple : * mut crate :: fermented :: generics :: std_sync_OnceLock_u32 , pub complex : * mut crate :: fermented :: generics :: std_sync_OnceLock_String , pub opaque : * mut crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext } impl ferment :: FFIConversionFrom < example_thread_safe :: primitives :: oncelock :: RwLockExample > for example_thread_safe_primitives_oncelock_RwLockExample { unsafe fn ffi_from_const (ffi : * const example_thread_safe_primitives_oncelock_RwLockExample) -> example_thread_safe :: primitives :: oncelock :: RwLockExample { let ffi_ref = & * ffi ; example_thread_safe :: primitives :: oncelock :: RwLockExample { simple : < crate :: fermented :: generics :: std_sync_OnceLock_u32 as ferment :: FFIConversionFrom < std :: sync :: OnceLock < u32 > >> :: ffi_from (ffi_ref . simple) , complex : < crate :: fermented :: generics :: std_sync_OnceLock_String as ferment :: FFIConversionFrom < std :: sync :: OnceLock < String > >> :: ffi_from (ffi_ref . complex) , opaque : < crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (ffi_ref . opaque) } } } impl ferment :: FFIConversionTo < example_thread_safe :: primitives :: oncelock :: RwLockExample > for example_thread_safe_primitives_oncelock_RwLockExample { unsafe fn ffi_to_const (obj : example_thread_safe :: primitives :: oncelock :: RwLockExample) -> * const example_thread_safe_primitives_oncelock_RwLockExample { ferment :: boxed (example_thread_safe_primitives_oncelock_RwLockExample { simple : < crate :: fermented :: generics :: std_sync_OnceLock_u32 as ferment :: FFIConversionTo < std :: sync :: OnceLock < u32 > >> :: ffi_to (obj . simple) , complex : < crate :: fermented :: generics :: std_sync_OnceLock_String as ferment :: FFIConversionTo < std :: sync :: OnceLock < String > >> :: ffi_to (obj . complex) , opaque : < crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionTo < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_to (obj . opaque) }) } } impl Drop for example_thread_safe_primitives_oncelock_RwLockExample { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . simple) ; ferment :: unbox_any (ffi_ref . complex) ; ferment :: unbox_any (ffi_ref . opaque) ; } } } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_ctor < > (simple : * mut crate :: fermented :: generics :: std_sync_OnceLock_u32 , complex : * mut crate :: fermented :: generics :: std_sync_OnceLock_String , opaque : * mut crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe_primitives_oncelock_RwLockExample { ferment :: boxed (example_thread_safe_primitives_oncelock_RwLockExample { simple , complex , opaque }) } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_destroy < > (ffi : * mut example_thread_safe_primitives_oncelock_RwLockExample) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_get_simple < > (obj : * const example_thread_safe_primitives_oncelock_RwLockExample) -> * mut crate :: fermented :: generics :: std_sync_OnceLock_u32 { (* obj) . simple } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_get_complex < > (obj : * const example_thread_safe_primitives_oncelock_RwLockExample) -> * mut crate :: fermented :: generics :: std_sync_OnceLock_String { (* obj) . complex } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_get_opaque < > (obj : * const example_thread_safe_primitives_oncelock_RwLockExample) -> * mut crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext { (* obj) . opaque } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_set_simple < > (obj : * mut example_thread_safe_primitives_oncelock_RwLockExample , value : * mut crate :: fermented :: generics :: std_sync_OnceLock_u32) { (* obj) . simple = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_set_complex < > (obj : * mut example_thread_safe_primitives_oncelock_RwLockExample , value : * mut crate :: fermented :: generics :: std_sync_OnceLock_String) { (* obj) . complex = value ; } # [no_mangle] pub unsafe extern "C" fn example_thread_safe_primitives_oncelock_RwLockExample_set_opaque < > (obj : * mut example_thread_safe_primitives_oncelock_RwLockExample , value : * mut crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext) { (* obj) . opaque = value ; } } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as example_thread_safe ; # [repr (C)] # [derive (Clone)] pub struct std_cell_RefCell_String { pub obj : * mut std :: cell :: RefCell < String > } impl ferment :: FFIConversionFrom < std :: cell :: RefCell < String > > for std_cell_RefCell_String { unsafe fn ffi_from_const (ffi : * const std_cell_RefCell_String) -> std :: cell :: RefCell < String > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: RefCell < String > > for std_cell_RefCell_String { unsafe fn ffi_to_const (obj : std :: cell :: RefCell < String >) -> * const std_cell_RefCell_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_RefCell_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_cell_RefCell_String { ferment :: boxed (std_cell_RefCell_String { obj : ferment :: boxed (std :: cell :: RefCell :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_String_destroy (ffi : * mut std_cell_RefCell_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_String_read (obj : * mut crate :: fermented :: generics :: std_cell_RefCell_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_cell_RefCell_String as ferment :: FFIConversionFrom < std :: cell :: RefCell < String > >> :: ffi_from (obj) ; let obj = lock . borrow () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_String_write (obj : * mut crate :: fermented :: generics :: std_cell_RefCell_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_cell_RefCell_String as ferment :: FFIConversionFrom < std :: cell :: RefCell < String > >> :: ffi_from (obj) ; match lock . try_borrow_mut () { Ok (mut obj) => { * obj = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } , Err (_) => { } , } ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_Cell_u32 { pub obj : * mut std :: rc :: Rc < std :: cell :: Cell < u32 > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < u32 > > > for std_rc_Rc_std_cell_Cell_u32 { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_Cell_u32) -> std :: rc :: Rc < std :: cell :: Cell < u32 > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: Cell < u32 > > > for std_rc_Rc_std_cell_Cell_u32 { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: Cell < u32 > >) -> * const std_rc_Rc_std_cell_Cell_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_Cell_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_u32_ctor (obj : u32) -> * mut std_rc_Rc_std_cell_Cell_u32 { ferment :: boxed (std_rc_Rc_std_cell_Cell_u32 { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: Cell :: new (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_u32_destroy (ffi : * mut std_rc_Rc_std_cell_Cell_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_u32_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < u32 > > >> :: ffi_from (obj) ; let obj = lock . get () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_u32_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < u32 > > >> :: ffi_from (obj) ; lock . set (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_RefCell_u32 { pub obj : * mut std :: rc :: Rc < std :: cell :: RefCell < u32 > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < u32 > > > for std_rc_Rc_std_cell_RefCell_u32 { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_RefCell_u32) -> std :: rc :: Rc < std :: cell :: RefCell < u32 > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: RefCell < u32 > > > for std_rc_Rc_std_cell_RefCell_u32 { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: RefCell < u32 > >) -> * const std_rc_Rc_std_cell_RefCell_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_RefCell_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_u32_ctor (obj : u32) -> * mut std_rc_Rc_std_cell_RefCell_u32 { ferment :: boxed (std_rc_Rc_std_cell_RefCell_u32 { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: RefCell :: new (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_u32_destroy (ffi : * mut std_rc_Rc_std_cell_RefCell_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_u32_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < u32 > > >> :: ffi_from (obj) ; let obj = lock . borrow () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_u32_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < u32 > > >> :: ffi_from (obj) ; match lock . try_borrow_mut () { Ok (mut obj) => { * obj = value ; } , Err (_) => { } , } ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { pub obj : * mut std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > } impl ferment :: FFIConversionFrom < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > for std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { unsafe fn ffi_from_const (ffi : * const std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) -> std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > for std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { unsafe fn ffi_to_const (obj : std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType >) -> * const std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_ctor (obj : * mut example_thread_safe :: primitives :: rc :: CopyableType) -> * mut std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { ferment :: boxed (std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { obj : ferment :: boxed (std :: cell :: Cell :: new (std :: ptr :: read (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_destroy (ffi : * mut std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_read (obj : * mut crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) -> * mut example_thread_safe :: primitives :: rc :: CopyableType { let lock = < crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionFrom < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > >> :: ffi_from (obj) ; let obj = lock . get () ; ferment :: boxed (obj) } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_write (obj : * mut crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType , value : * mut example_thread_safe :: primitives :: rc :: CopyableType) { let lock = < crate :: fermented :: generics :: std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionFrom < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > >> :: ffi_from (obj) ; lock . set (std :: ptr :: read (value)) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_u32 { pub obj : * mut std :: sync :: Arc < std :: sync :: RwLock < u32 > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < u32 > > > for std_sync_Arc_std_sync_RwLock_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_u32) -> std :: sync :: Arc < std :: sync :: RwLock < u32 > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < u32 > > > for std_sync_Arc_std_sync_RwLock_u32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < u32 > >) -> * const std_sync_Arc_std_sync_RwLock_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_u32_ctor (obj : u32) -> * mut std_sync_Arc_std_sync_RwLock_u32 { ferment :: boxed (std_sync_Arc_std_sync_RwLock_u32 { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: RwLock :: new (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_u32_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_u32_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < u32 > > >> :: ffi_from (obj) ; let obj = lock . read () . unwrap () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_u32_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < u32 > > >> :: ffi_from (obj) ; let mut obj = lock . write () . unwrap () ; * obj = value ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_Mutex_u32 { pub obj : * mut std :: sync :: Arc < std :: sync :: Mutex < u32 > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < u32 > > > for std_sync_Arc_std_sync_Mutex_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_Mutex_u32) -> std :: sync :: Arc < std :: sync :: Mutex < u32 > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < u32 > > > for std_sync_Arc_std_sync_Mutex_u32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: Mutex < u32 > >) -> * const std_sync_Arc_std_sync_Mutex_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_Mutex_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_u32_ctor (obj : u32) -> * mut std_sync_Arc_std_sync_Mutex_u32 { ferment :: boxed (std_sync_Arc_std_sync_Mutex_u32 { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: Mutex :: new (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_u32_destroy (ffi : * mut std_sync_Arc_std_sync_Mutex_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_u32_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < u32 > > >> :: ffi_from (obj) ; let obj = lock . lock () . unwrap () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_u32_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < u32 > > >> :: ffi_from (obj) ; let mut obj = lock . lock () . unwrap () ; * obj = value ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Mutex_u32 { pub obj : * mut std :: sync :: Mutex < u32 > } impl ferment :: FFIConversionFrom < std :: sync :: Mutex < u32 > > for std_sync_Mutex_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Mutex_u32) -> std :: sync :: Mutex < u32 > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Mutex < u32 > > for std_sync_Mutex_u32 { unsafe fn ffi_to_const (obj : std :: sync :: Mutex < u32 >) -> * const std_sync_Mutex_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Mutex_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_u32_ctor (obj : u32) -> * mut std_sync_Mutex_u32 { ferment :: boxed (std_sync_Mutex_u32 { obj : ferment :: boxed (std :: sync :: Mutex :: new (obj)) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_u32_destroy (ffi : * mut std_sync_Mutex_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_u32_read (obj : * mut crate :: fermented :: generics :: std_sync_Mutex_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_sync_Mutex_u32 as ferment :: FFIConversionFrom < std :: sync :: Mutex < u32 > >> :: ffi_from (obj) ; let obj = lock . lock () . unwrap () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_u32_write (obj : * mut crate :: fermented :: generics :: std_sync_Mutex_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_sync_Mutex_u32 as ferment :: FFIConversionFrom < std :: sync :: Mutex < u32 > >> :: ffi_from (obj) ; let mut obj = lock . lock () . unwrap () ; * obj = value ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_Mutex_String { pub obj : * mut std :: sync :: Arc < std :: sync :: Mutex < String > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < String > > > for std_sync_Arc_std_sync_Mutex_String { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_Mutex_String) -> std :: sync :: Arc < std :: sync :: Mutex < String > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < String > > > for std_sync_Arc_std_sync_Mutex_String { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: Mutex < String > >) -> * const std_sync_Arc_std_sync_Mutex_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_Mutex_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_sync_Arc_std_sync_Mutex_String { ferment :: boxed (std_sync_Arc_std_sync_Mutex_String { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: Mutex :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_String_destroy (ffi : * mut std_sync_Arc_std_sync_Mutex_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_String_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < String > > >> :: ffi_from (obj) ; let obj = lock . lock () . unwrap () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_String_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < String > > >> :: ffi_from (obj) ; let mut obj = lock . lock () . unwrap () ; * obj = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { pub obj : * mut std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > > for std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext) -> std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > > for std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > >) -> * const std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: Mutex :: new (std :: ptr :: read (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let obj = lock . lock () . unwrap () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let mut obj = lock . lock () . unwrap () ; * obj = std :: ptr :: read (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_Cell_u32 { pub obj : * mut std :: cell :: Cell < u32 > } impl ferment :: FFIConversionFrom < std :: cell :: Cell < u32 > > for std_cell_Cell_u32 { unsafe fn ffi_from_const (ffi : * const std_cell_Cell_u32) -> std :: cell :: Cell < u32 > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: Cell < u32 > > for std_cell_Cell_u32 { unsafe fn ffi_to_const (obj : std :: cell :: Cell < u32 >) -> * const std_cell_Cell_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_Cell_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_u32_ctor (obj : u32) -> * mut std_cell_Cell_u32 { ferment :: boxed (std_cell_Cell_u32 { obj : ferment :: boxed (std :: cell :: Cell :: new (obj)) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_u32_destroy (ffi : * mut std_cell_Cell_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_u32_read (obj : * mut crate :: fermented :: generics :: std_cell_Cell_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_cell_Cell_u32 as ferment :: FFIConversionFrom < std :: cell :: Cell < u32 > >> :: ffi_from (obj) ; let obj = lock . get () ; obj } # [no_mangle] pub unsafe extern "C" fn std_cell_Cell_u32_write (obj : * mut crate :: fermented :: generics :: std_cell_Cell_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_cell_Cell_u32 as ferment :: FFIConversionFrom < std :: cell :: Cell < u32 > >> :: ffi_from (obj) ; lock . set (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_UnsafeCell_String { pub obj : * mut std :: rc :: Rc < std :: cell :: UnsafeCell < String > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < String > > > for std_rc_Rc_std_cell_UnsafeCell_String { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_UnsafeCell_String) -> std :: rc :: Rc < std :: cell :: UnsafeCell < String > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: UnsafeCell < String > > > for std_rc_Rc_std_cell_UnsafeCell_String { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: UnsafeCell < String > >) -> * const std_rc_Rc_std_cell_UnsafeCell_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_UnsafeCell_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_rc_Rc_std_cell_UnsafeCell_String { ferment :: boxed (std_rc_Rc_std_cell_UnsafeCell_String { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: UnsafeCell :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_String_destroy (ffi : * mut std_rc_Rc_std_cell_UnsafeCell_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_String_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < String > > >> :: ffi_from (obj) ; let obj = & * lock . get () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_String_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String , value : * mut std :: os :: raw :: c_char) { let obj = < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_String as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < String > > >> :: ffi_from (obj) ; * obj . get () = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_example_thread_safe_entry_FFIContext { pub obj : * mut example_thread_safe :: entry :: FFIContext } impl ferment :: FFIConversionFrom < std :: sync :: Arc < example_thread_safe :: entry :: FFIContext > > for std_sync_Arc_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_example_thread_safe_entry_FFIContext) -> std :: sync :: Arc < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: sync :: Arc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < example_thread_safe :: entry :: FFIContext > > for std_sync_Arc_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: Arc < example_thread_safe :: entry :: FFIContext >) -> * const std_sync_Arc_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : std :: sync :: Arc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_sync_Arc_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_sync_Arc_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_Arc_example_thread_safe_entry_FFIContext { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_Arc_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { pub obj : * mut std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > > for std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) -> std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > > for std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > >) -> * const std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { ferment :: boxed (std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: UnsafeCell :: new (std :: ptr :: read (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let obj = & * lock . get () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let obj = < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; * obj . get () = std :: ptr :: read (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_String { pub obj : * mut std :: sync :: RwLock < String > } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < String > > for std_sync_RwLock_String { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_String) -> std :: sync :: RwLock < String > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < String > > for std_sync_RwLock_String { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < String >) -> * const std_sync_RwLock_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_RwLock_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_sync_RwLock_String { ferment :: boxed (std_sync_RwLock_String { obj : ferment :: boxed (std :: sync :: RwLock :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_String_destroy (ffi : * mut std_sync_RwLock_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_String_read (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_sync_RwLock_String as ferment :: FFIConversionFrom < std :: sync :: RwLock < String > >> :: ffi_from (obj) ; let obj = lock . read () . unwrap () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_String_write (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_sync_RwLock_String as ferment :: FFIConversionFrom < std :: sync :: RwLock < String > >> :: ffi_from (obj) ; let mut obj = lock . write () . unwrap () ; * obj = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_RefCell_example_thread_safe_entry_FFIContext { pub obj : * mut std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > } impl ferment :: FFIConversionFrom < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > for std_cell_RefCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_cell_RefCell_example_thread_safe_entry_FFIContext) -> std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > for std_cell_RefCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext >) -> * const std_cell_RefCell_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_RefCell_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_cell_RefCell_example_thread_safe_entry_FFIContext { ferment :: boxed (std_cell_RefCell_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: cell :: RefCell :: new (std :: ptr :: read (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_cell_RefCell_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let obj = lock . borrow () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; match lock . try_borrow_mut () { Ok (mut obj) => { * obj = std :: ptr :: read (value) ; } , Err (_) => { } , } ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Mutex_String { pub obj : * mut std :: sync :: Mutex < String > } impl ferment :: FFIConversionFrom < std :: sync :: Mutex < String > > for std_sync_Mutex_String { unsafe fn ffi_from_const (ffi : * const std_sync_Mutex_String) -> std :: sync :: Mutex < String > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Mutex < String > > for std_sync_Mutex_String { unsafe fn ffi_to_const (obj : std :: sync :: Mutex < String >) -> * const std_sync_Mutex_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Mutex_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_sync_Mutex_String { ferment :: boxed (std_sync_Mutex_String { obj : ferment :: boxed (std :: sync :: Mutex :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_String_destroy (ffi : * mut std_sync_Mutex_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_String_read (obj : * mut crate :: fermented :: generics :: std_sync_Mutex_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_sync_Mutex_String as ferment :: FFIConversionFrom < std :: sync :: Mutex < String > >> :: ffi_from (obj) ; let obj = lock . lock () . unwrap () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_String_write (obj : * mut crate :: fermented :: generics :: std_sync_Mutex_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_sync_Mutex_String as ferment :: FFIConversionFrom < std :: sync :: Mutex < String > >> :: ffi_from (obj) ; let mut obj = lock . lock () . unwrap () ; * obj = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } # [repr (C)] # [derive (Clone)] pub struct Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { caller : unsafe extern "C" fn (* const example_thread_safe :: entry :: FFIContext , u32 , * mut std :: os :: raw :: c_char) -> * mut std :: os :: raw :: c_char , destructor : unsafe extern "C" fn (* mut std :: os :: raw :: c_char) } impl Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { pub unsafe fn call (& self , o_0 : * const example_thread_safe :: entry :: FFIContext , o_1 : u32 , o_2 : & String) -> String { let ffi_result = (self . caller) (o_0 , o_1 , < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (o_2 . clone ())) ; let result = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (ffi_result) ; (self . destructor) (ffi_result) ; result } } unsafe impl Send for Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { } unsafe impl Sync for Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String_ctor (caller : unsafe extern "C" fn (* const example_thread_safe :: entry :: FFIContext , u32 , * mut std :: os :: raw :: c_char) -> * mut std :: os :: raw :: c_char , destructor : unsafe extern "C" fn (* mut std :: os :: raw :: c_char)) -> * mut Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { ferment :: boxed (Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { caller , destructor }) } # [no_mangle] pub unsafe extern "C" fn Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String_destroy (ffi : * mut Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_example_thread_safe_entry_FFIContext { pub obj : * mut std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > for std_sync_RwLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_example_thread_safe_entry_FFIContext) -> std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > for std_sync_RwLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext >) -> * const std_sync_RwLock_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_RwLock_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_sync_RwLock_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_RwLock_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: sync :: RwLock :: new (std :: ptr :: read (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_RwLock_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let obj = lock . read () . unwrap () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let mut obj = lock . write () . unwrap () ; * obj = std :: ptr :: read (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_UnsafeCell_String { pub obj : * mut std :: cell :: UnsafeCell < String > } impl ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < String > > for std_cell_UnsafeCell_String { unsafe fn ffi_from_const (ffi : * const std_cell_UnsafeCell_String) -> std :: cell :: UnsafeCell < String > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: UnsafeCell < String > > for std_cell_UnsafeCell_String { unsafe fn ffi_to_const (obj : std :: cell :: UnsafeCell < String >) -> * const std_cell_UnsafeCell_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_UnsafeCell_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_cell_UnsafeCell_String { ferment :: boxed (std_cell_UnsafeCell_String { obj : ferment :: boxed (std :: cell :: UnsafeCell :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_String_destroy (ffi : * mut std_cell_UnsafeCell_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_String_read (obj : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_cell_UnsafeCell_String as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < String > >> :: ffi_from (obj) ; let obj = & * lock . get () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_String_write (obj : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_String , value : * mut std :: os :: raw :: c_char) { let obj = < crate :: fermented :: generics :: std_cell_UnsafeCell_String as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < String > >> :: ffi_from (obj) ; * obj . get () = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_u32 { pub obj : u32 } impl ferment :: FFIConversionFrom < std :: sync :: Arc < u32 > > for std_sync_Arc_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_u32) -> std :: sync :: Arc < u32 > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < u32 > > for std_sync_Arc_u32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < u32 >) -> * const std_sync_Arc_u32 { ferment :: boxed (Self { obj : * obj }) } } impl Drop for std_sync_Arc_u32 { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_u32_ctor (obj : u32) -> * mut std_sync_Arc_u32 { ferment :: boxed (std_sync_Arc_u32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_u32_destroy (ffi : * mut std_sync_Arc_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_String { pub obj : * mut std :: sync :: Arc < std :: sync :: RwLock < String > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < String > > > for std_sync_Arc_std_sync_RwLock_String { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_String) -> std :: sync :: Arc < std :: sync :: RwLock < String > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < String > > > for std_sync_Arc_std_sync_RwLock_String { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < String > >) -> * const std_sync_Arc_std_sync_RwLock_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_sync_Arc_std_sync_RwLock_String { ferment :: boxed (std_sync_Arc_std_sync_RwLock_String { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: RwLock :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_String_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_String_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < String > > >> :: ffi_from (obj) ; let obj = lock . read () . unwrap () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_String_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < String > > >> :: ffi_from (obj) ; let mut obj = lock . write () . unwrap () ; * obj = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_OnceLock_example_thread_safe_entry_FFIContext { pub obj : * mut std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > } impl ferment :: FFIConversionFrom < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > for std_sync_OnceLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_OnceLock_example_thread_safe_entry_FFIContext) -> std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > for std_sync_OnceLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext >) -> * const std_sync_OnceLock_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_OnceLock_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_example_thread_safe_entry_FFIContext_ctor () -> * mut std_sync_OnceLock_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_OnceLock_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: sync :: OnceLock :: new ()) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_OnceLock_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let obj = lock . get () . unwrap () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; _ = lock . set (std :: ptr :: read (value)) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_OnceLock_String { pub obj : * mut std :: sync :: Arc < std :: sync :: OnceLock < String > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < String > > > for std_sync_Arc_std_sync_OnceLock_String { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_OnceLock_String) -> std :: sync :: Arc < std :: sync :: OnceLock < String > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: OnceLock < String > > > for std_sync_Arc_std_sync_OnceLock_String { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: OnceLock < String > >) -> * const std_sync_Arc_std_sync_OnceLock_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_OnceLock_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_String_ctor () -> * mut std_sync_Arc_std_sync_OnceLock_String { ferment :: boxed (std_sync_Arc_std_sync_OnceLock_String { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: OnceLock :: new ())) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_String_destroy (ffi : * mut std_sync_Arc_std_sync_OnceLock_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_String_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < String > > >> :: ffi_from (obj) ; let obj = lock . get () . unwrap () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_String_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_String as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < String > > >> :: ffi_from (obj) ; _ = lock . set (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value)) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { pub obj : * mut std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > > for std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) -> std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > > for std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > >) -> * const std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_ctor (obj : * mut example_thread_safe :: primitives :: rc :: CopyableType) -> * mut std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { ferment :: boxed (std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: Cell :: new (std :: ptr :: read (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_destroy (ffi : * mut std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType) -> * mut example_thread_safe :: primitives :: rc :: CopyableType { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > >> :: ffi_from (obj) ; let obj = lock . get () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType , value : * mut example_thread_safe :: primitives :: rc :: CopyableType) { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_Cell_example_thread_safe_primitives_rc_CopyableType as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: Cell < example_thread_safe :: primitives :: rc :: CopyableType > > >> :: ffi_from (obj) ; lock . set (std :: ptr :: read (value)) ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { pub obj : * mut std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > } impl ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > for std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) -> std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > > for std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext >) -> * const std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { ferment :: boxed (std_cell_UnsafeCell_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: cell :: UnsafeCell :: new (std :: ptr :: read (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let obj = & * lock . get () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let obj = < crate :: fermented :: generics :: std_cell_UnsafeCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; * obj . get () = std :: ptr :: read (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_UnsafeCell_u32 { pub obj : * mut std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > > for std_rc_Rc_std_cell_UnsafeCell_u32 { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_UnsafeCell_u32) -> std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > > for std_rc_Rc_std_cell_UnsafeCell_u32 { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > >) -> * const std_rc_Rc_std_cell_UnsafeCell_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_UnsafeCell_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_u32_ctor (obj : u32) -> * mut std_rc_Rc_std_cell_UnsafeCell_u32 { ferment :: boxed (std_rc_Rc_std_cell_UnsafeCell_u32 { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: UnsafeCell :: new (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_u32_destroy (ffi : * mut std_rc_Rc_std_cell_UnsafeCell_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_u32_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > >> :: ffi_from (obj) ; let obj = & * lock . get () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_UnsafeCell_u32_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 , value : u32) { let obj = < crate :: fermented :: generics :: std_rc_Rc_std_cell_UnsafeCell_u32 as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: UnsafeCell < u32 > > >> :: ffi_from (obj) ; * obj . get () = value ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_RefCell_u32 { pub obj : * mut std :: cell :: RefCell < u32 > } impl ferment :: FFIConversionFrom < std :: cell :: RefCell < u32 > > for std_cell_RefCell_u32 { unsafe fn ffi_from_const (ffi : * const std_cell_RefCell_u32) -> std :: cell :: RefCell < u32 > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: RefCell < u32 > > for std_cell_RefCell_u32 { unsafe fn ffi_to_const (obj : std :: cell :: RefCell < u32 >) -> * const std_cell_RefCell_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_RefCell_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_u32_ctor (obj : u32) -> * mut std_cell_RefCell_u32 { ferment :: boxed (std_cell_RefCell_u32 { obj : ferment :: boxed (std :: cell :: RefCell :: new (obj)) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_u32_destroy (ffi : * mut std_cell_RefCell_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_u32_read (obj : * mut crate :: fermented :: generics :: std_cell_RefCell_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_cell_RefCell_u32 as ferment :: FFIConversionFrom < std :: cell :: RefCell < u32 > >> :: ffi_from (obj) ; let obj = lock . borrow () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_cell_RefCell_u32_write (obj : * mut crate :: fermented :: generics :: std_cell_RefCell_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_cell_RefCell_u32 as ferment :: FFIConversionFrom < std :: cell :: RefCell < u32 > >> :: ffi_from (obj) ; match lock . try_borrow_mut () { Ok (mut obj) => { * obj = value ; } , Err (_) => { } , } ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { pub obj : * mut std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > > for std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext) -> std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > > for std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > >) -> * const std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { ferment :: boxed (std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: RefCell :: new (std :: ptr :: read (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let obj = lock . borrow () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; match lock . try_borrow_mut () { Ok (mut obj) => { * obj = std :: ptr :: read (value) ; } , Err (_) => { } , } ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_OnceLock_String { pub obj : * mut std :: sync :: OnceLock < String > } impl ferment :: FFIConversionFrom < std :: sync :: OnceLock < String > > for std_sync_OnceLock_String { unsafe fn ffi_from_const (ffi : * const std_sync_OnceLock_String) -> std :: sync :: OnceLock < String > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: OnceLock < String > > for std_sync_OnceLock_String { unsafe fn ffi_to_const (obj : std :: sync :: OnceLock < String >) -> * const std_sync_OnceLock_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_OnceLock_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_String_ctor () -> * mut std_sync_OnceLock_String { ferment :: boxed (std_sync_OnceLock_String { obj : ferment :: boxed (std :: sync :: OnceLock :: new ()) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_String_destroy (ffi : * mut std_sync_OnceLock_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_String_read (obj : * mut crate :: fermented :: generics :: std_sync_OnceLock_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_sync_OnceLock_String as ferment :: FFIConversionFrom < std :: sync :: OnceLock < String > >> :: ffi_from (obj) ; let obj = lock . get () . unwrap () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_String_write (obj : * mut crate :: fermented :: generics :: std_sync_OnceLock_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_sync_OnceLock_String as ferment :: FFIConversionFrom < std :: sync :: OnceLock < String > >> :: ffi_from (obj) ; _ = lock . set (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value)) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_OnceLock_u32 { pub obj : * mut std :: sync :: OnceLock < u32 > } impl ferment :: FFIConversionFrom < std :: sync :: OnceLock < u32 > > for std_sync_OnceLock_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_OnceLock_u32) -> std :: sync :: OnceLock < u32 > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: OnceLock < u32 > > for std_sync_OnceLock_u32 { unsafe fn ffi_to_const (obj : std :: sync :: OnceLock < u32 >) -> * const std_sync_OnceLock_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_OnceLock_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_u32_ctor () -> * mut std_sync_OnceLock_u32 { ferment :: boxed (std_sync_OnceLock_u32 { obj : ferment :: boxed (std :: sync :: OnceLock :: new ()) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_u32_destroy (ffi : * mut std_sync_OnceLock_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_u32_read (obj : * mut crate :: fermented :: generics :: std_sync_OnceLock_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_sync_OnceLock_u32 as ferment :: FFIConversionFrom < std :: sync :: OnceLock < u32 > >> :: ffi_from (obj) ; let obj = lock . get () . unwrap () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_sync_OnceLock_u32_write (obj : * mut crate :: fermented :: generics :: std_sync_OnceLock_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_sync_OnceLock_u32 as ferment :: FFIConversionFrom < std :: sync :: OnceLock < u32 > >> :: ffi_from (obj) ; _ = lock . set (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_OnceLock_u32 { pub obj : * mut std :: sync :: Arc < std :: sync :: OnceLock < u32 > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < u32 > > > for std_sync_Arc_std_sync_OnceLock_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_OnceLock_u32) -> std :: sync :: Arc < std :: sync :: OnceLock < u32 > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: OnceLock < u32 > > > for std_sync_Arc_std_sync_OnceLock_u32 { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: OnceLock < u32 > >) -> * const std_sync_Arc_std_sync_OnceLock_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_OnceLock_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_u32_ctor () -> * mut std_sync_Arc_std_sync_OnceLock_u32 { ferment :: boxed (std_sync_Arc_std_sync_OnceLock_u32 { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: OnceLock :: new ())) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_u32_destroy (ffi : * mut std_sync_Arc_std_sync_OnceLock_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_u32_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < u32 > > >> :: ffi_from (obj) ; let obj = lock . get () . unwrap () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_u32_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_u32 as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < u32 > > >> :: ffi_from (obj) ; _ = lock . set (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Mutex_example_thread_safe_entry_FFIContext { pub obj : * mut std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > } impl ferment :: FFIConversionFrom < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > for std_sync_Mutex_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_Mutex_example_thread_safe_entry_FFIContext) -> std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > > for std_sync_Mutex_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext >) -> * const std_sync_Mutex_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Mutex_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_sync_Mutex_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_Mutex_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: sync :: Mutex :: new (std :: ptr :: read (obj))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_Mutex_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let obj = lock . lock () . unwrap () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Mutex_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_sync_Mutex_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Mutex < example_thread_safe :: entry :: FFIContext > >> :: ffi_from (obj) ; let mut obj = lock . lock () . unwrap () ; * obj = std :: ptr :: read (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_cell_UnsafeCell_u32 { pub obj : * mut std :: cell :: UnsafeCell < u32 > } impl ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < u32 > > for std_cell_UnsafeCell_u32 { unsafe fn ffi_from_const (ffi : * const std_cell_UnsafeCell_u32) -> std :: cell :: UnsafeCell < u32 > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: cell :: UnsafeCell < u32 > > for std_cell_UnsafeCell_u32 { unsafe fn ffi_to_const (obj : std :: cell :: UnsafeCell < u32 >) -> * const std_cell_UnsafeCell_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_cell_UnsafeCell_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_u32_ctor (obj : u32) -> * mut std_cell_UnsafeCell_u32 { ferment :: boxed (std_cell_UnsafeCell_u32 { obj : ferment :: boxed (std :: cell :: UnsafeCell :: new (obj)) }) } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_u32_destroy (ffi : * mut std_cell_UnsafeCell_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_u32_read (obj : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_cell_UnsafeCell_u32 as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < u32 > >> :: ffi_from (obj) ; let obj = & * lock . get () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_cell_UnsafeCell_u32_write (obj : * mut crate :: fermented :: generics :: std_cell_UnsafeCell_u32 , value : u32) { let obj = < crate :: fermented :: generics :: std_cell_UnsafeCell_u32 as ferment :: FFIConversionFrom < std :: cell :: UnsafeCell < u32 > >> :: ffi_from (obj) ; * obj . get () = value ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_String { pub obj : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < std :: rc :: Rc < String > > for std_rc_Rc_String { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_String) -> std :: rc :: Rc < String > { let ffi_ref = & * ffi ; std :: rc :: Rc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < String > > for std_rc_Rc_String { unsafe fn ffi_to_const (obj : std :: rc :: Rc < String >) -> * const std_rc_Rc_String { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to ((* obj) . clone ()) }) } } impl Drop for std_rc_Rc_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_rc_Rc_String { ferment :: boxed (std_rc_Rc_String { obj }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_String_destroy (ffi : * mut std_rc_Rc_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { pub obj : * mut std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > > for std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext) -> std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > > for std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > >) -> * const std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext_ctor () -> * mut std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: OnceLock :: new ())) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let obj = lock . get () . unwrap () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_OnceLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: OnceLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; _ = lock . set (std :: ptr :: read (value)) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_example_thread_safe_entry_FFIContext { pub obj : * mut example_thread_safe :: entry :: FFIContext } impl ferment :: FFIConversionFrom < std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > > for std_rc_Rc_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_example_thread_safe_entry_FFIContext) -> std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > { let ffi_ref = & * ffi ; std :: rc :: Rc :: from_raw (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < example_thread_safe :: entry :: FFIContext > > for std_rc_Rc_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: rc :: Rc < example_thread_safe :: entry :: FFIContext >) -> * const std_rc_Rc_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : std :: rc :: Rc :: into_raw (obj) . cast_mut () }) } } impl Drop for std_rc_Rc_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_rc_Rc_example_thread_safe_entry_FFIContext { ferment :: boxed (std_rc_Rc_example_thread_safe_entry_FFIContext { obj }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_rc_Rc_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_u32 { pub obj : u32 } impl ferment :: FFIConversionFrom < std :: rc :: Rc < u32 > > for std_rc_Rc_u32 { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_u32) -> std :: rc :: Rc < u32 > { let ffi_ref = & * ffi ; std :: rc :: Rc :: new (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < u32 > > for std_rc_Rc_u32 { unsafe fn ffi_to_const (obj : std :: rc :: Rc < u32 >) -> * const std_rc_Rc_u32 { ferment :: boxed (Self { obj : * obj }) } } impl Drop for std_rc_Rc_u32 { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_u32_ctor (obj : u32) -> * mut std_rc_Rc_u32 { ferment :: boxed (std_rc_Rc_u32 { obj }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_u32_destroy (ffi : * mut std_rc_Rc_u32) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_String { pub obj : * mut std :: os :: raw :: c_char } impl ferment :: FFIConversionFrom < std :: sync :: Arc < String > > for std_sync_Arc_String { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_String) -> std :: sync :: Arc < String > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (ferment :: FFIConversionFrom :: ffi_from (ffi_ref . obj)) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < String > > for std_sync_Arc_String { unsafe fn ffi_to_const (obj : std :: sync :: Arc < String >) -> * const std_sync_Arc_String { ferment :: boxed (Self { obj : ferment :: FFIConversionTo :: ffi_to ((* obj) . clone ()) }) } } impl Drop for std_sync_Arc_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_sync_Arc_String { ferment :: boxed (std_sync_Arc_String { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_String_destroy (ffi : * mut std_sync_Arc_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_rc_Rc_std_cell_RefCell_String { pub obj : * mut std :: rc :: Rc < std :: cell :: RefCell < String > > } impl ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < String > > > for std_rc_Rc_std_cell_RefCell_String { unsafe fn ffi_from_const (ffi : * const std_rc_Rc_std_cell_RefCell_String) -> std :: rc :: Rc < std :: cell :: RefCell < String > > { let ffi_ref = & * ffi ; std :: rc :: Rc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: rc :: Rc < std :: cell :: RefCell < String > > > for std_rc_Rc_std_cell_RefCell_String { unsafe fn ffi_to_const (obj : std :: rc :: Rc < std :: cell :: RefCell < String > >) -> * const std_rc_Rc_std_cell_RefCell_String { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_rc_Rc_std_cell_RefCell_String { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_String_ctor (obj : * mut std :: os :: raw :: c_char) -> * mut std_rc_Rc_std_cell_RefCell_String { ferment :: boxed (std_rc_Rc_std_cell_RefCell_String { obj : ferment :: boxed (std :: rc :: Rc :: new (std :: cell :: RefCell :: new (< std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_String_destroy (ffi : * mut std_rc_Rc_std_cell_RefCell_String) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_String_read (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String) -> * mut std :: os :: raw :: c_char { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < String > > >> :: ffi_from (obj) ; let obj = lock . borrow () ; < std :: os :: raw :: c_char as ferment :: FFIConversionTo < String >> :: ffi_to (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_rc_Rc_std_cell_RefCell_String_write (obj : * mut crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String , value : * mut std :: os :: raw :: c_char) { let lock = < crate :: fermented :: generics :: std_rc_Rc_std_cell_RefCell_String as ferment :: FFIConversionFrom < std :: rc :: Rc < std :: cell :: RefCell < String > > >> :: ffi_from (obj) ; match lock . try_borrow_mut () { Ok (mut obj) => { * obj = < std :: os :: raw :: c_char as ferment :: FFIConversionFrom < String >> :: ffi_from (value) ; } , Err (_) => { } , } ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { pub obj : * mut std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > } impl ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > > for std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) -> std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > { let ffi_ref = & * ffi ; std :: sync :: Arc :: clone (& * ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > > for std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { unsafe fn ffi_to_const (obj : std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > >) -> * const std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext_ctor (obj : * mut example_thread_safe :: entry :: FFIContext) -> * mut std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { ferment :: boxed (std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext { obj : ferment :: boxed (std :: sync :: Arc :: new (std :: sync :: RwLock :: new (std :: ptr :: read (obj)))) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext_destroy (ffi : * mut std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext_read (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext) -> * mut example_thread_safe :: entry :: FFIContext { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let obj = lock . read () . unwrap () ; ferment :: boxed (obj . clone ()) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext_write (obj : * mut crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext , value : * mut example_thread_safe :: entry :: FFIContext) { let lock = < crate :: fermented :: generics :: std_sync_Arc_std_sync_RwLock_example_thread_safe_entry_FFIContext as ferment :: FFIConversionFrom < std :: sync :: Arc < std :: sync :: RwLock < example_thread_safe :: entry :: FFIContext > > >> :: ffi_from (obj) ; let mut obj = lock . write () . unwrap () ; * obj = std :: ptr :: read (value) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { pub obj : * mut crate :: fermented :: generics :: Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String } impl ferment :: FFIConversionFrom < std :: sync :: Arc < dyn Fn (* const example_thread_safe :: entry :: FFIContext , u32 , & String) -> String > > for std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { unsafe fn ffi_from_const (ffi : * const std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String) -> std :: sync :: Arc < dyn Fn (* const example_thread_safe :: entry :: FFIContext , u32 , & String) -> String > { let ffi_ref = & * ffi ; std :: sync :: Arc :: new (move | o_0 , o_1 , o_2 | unsafe { (& * ffi_ref . obj) . call (o_0 , o_1 , o_2) }) } } impl Drop for std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { fn drop (& mut self) { unsafe { ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String_ctor (obj : * mut crate :: fermented :: generics :: Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String) -> * mut std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { ferment :: boxed (std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String { obj }) } # [no_mangle] pub unsafe extern "C" fn std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String_destroy (ffi : * mut std_sync_Arc_dyn_trait_Fn_ARGS_example_thread_safe_entry_FFIContext_u32_String_RTRN_String) { ferment :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct std_sync_RwLock_u32 { pub obj : * mut std :: sync :: RwLock < u32 > } impl ferment :: FFIConversionFrom < std :: sync :: RwLock < u32 > > for std_sync_RwLock_u32 { unsafe fn ffi_from_const (ffi : * const std_sync_RwLock_u32) -> std :: sync :: RwLock < u32 > { let ffi_ref = & * ffi ; std :: ptr :: read (ffi_ref . obj) } } impl ferment :: FFIConversionTo < std :: sync :: RwLock < u32 > > for std_sync_RwLock_u32 { unsafe fn ffi_to_const (obj : std :: sync :: RwLock < u32 >) -> * const std_sync_RwLock_u32 { ferment :: boxed (Self { obj : ferment :: boxed (obj) }) } } impl Drop for std_sync_RwLock_u32 { fn drop (& mut self) { unsafe { ferment :: unbox_any (self . obj) ; } } } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_u32_ctor (obj : u32) -> * mut std_sync_RwLock_u32 { ferment :: boxed (std_sync_RwLock_u32 { obj : ferment :: boxed (std :: sync :: RwLock :: new (obj)) }) } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_u32_destroy (ffi : * mut std_sync_RwLock_u32) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_u32_read (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_u32) -> u32 { let lock = < crate :: fermented :: generics :: std_sync_RwLock_u32 as ferment :: FFIConversionFrom < std :: sync :: RwLock < u32 > >> :: ffi_from (obj) ; let obj = lock . read () . unwrap () ; obj . clone () } # [no_mangle] pub unsafe extern "C" fn std_sync_RwLock_u32_write (obj : * mut crate :: fermented :: generics :: std_sync_RwLock_u32 , value : u32) { let lock = < crate :: fermented :: generics :: std_sync_RwLock_u32 as ferment :: FFIConversionFrom < std :: sync :: RwLock < u32 > >> :: ffi_from (obj) ; let mut obj = lock . write () . unwrap () ; * obj = value ; } }