# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod types { pub mod example_aliasing { use crate as example_aliasing ; pub mod aa { pub mod at_aa { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtAa`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_aa_at_aa_AtAa { pub version : u32 } impl ferment :: FFIConversionFrom < example_aliasing :: aa :: at_aa :: AtAa > for example_aliasing_aa_at_aa_AtAa { unsafe fn ffi_from_const (ffi : * const example_aliasing_aa_at_aa_AtAa) -> example_aliasing :: aa :: at_aa :: AtAa { let ffi_ref = & * ffi ; example_aliasing :: aa :: at_aa :: AtAa { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_aliasing :: aa :: at_aa :: AtAa > for example_aliasing_aa_at_aa_AtAa { unsafe fn ffi_to_const (obj : example_aliasing :: aa :: at_aa :: AtAa) -> * const example_aliasing_aa_at_aa_AtAa { ferment :: boxed (example_aliasing_aa_at_aa_AtAa { version : obj . version }) } } impl Drop for example_aliasing_aa_at_aa_AtAa { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } } pub mod bb { pub mod at_bb { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtBb`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_aa_bb_at_bb_AtBb { pub version : u32 } impl ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: at_bb :: AtBb > for example_aliasing_aa_bb_at_bb_AtBb { unsafe fn ffi_from_const (ffi : * const example_aliasing_aa_bb_at_bb_AtBb) -> example_aliasing :: aa :: bb :: at_bb :: AtBb { let ffi_ref = & * ffi ; example_aliasing :: aa :: bb :: at_bb :: AtBb { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: at_bb :: AtBb > for example_aliasing_aa_bb_at_bb_AtBb { unsafe fn ffi_to_const (obj : example_aliasing :: aa :: bb :: at_bb :: AtBb) -> * const example_aliasing_aa_bb_at_bb_AtBb { ferment :: boxed (example_aliasing_aa_bb_at_bb_AtBb { version : obj . version }) } } impl Drop for example_aliasing_aa_bb_at_bb_AtBb { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } } pub mod cc { pub mod at_cc { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtCc`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_aa_bb_cc_at_cc_AtCc { pub aa : * mut crate :: fermented :: types :: example_aliasing :: aa :: at_aa :: example_aliasing_aa_at_aa_AtAa , pub bb : * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: at_bb :: example_aliasing_aa_bb_at_bb_AtBb , pub dd : * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd , pub xx : * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: at_xx :: example_aliasing_zz_yy_xx_at_xx_AtXx , pub yy : * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: at_yy :: example_aliasing_zz_yy_at_yy_AtYy , pub zz : * mut crate :: fermented :: types :: example_aliasing :: zz :: at_zz :: example_aliasing_zz_at_zz_AtZz , pub vec_ww : * mut crate :: fermented :: generics :: Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw , pub vec_ww2 : * mut crate :: fermented :: generics :: Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 } impl ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > for example_aliasing_aa_bb_cc_at_cc_AtCc { unsafe fn ffi_from_const (ffi : * const example_aliasing_aa_bb_cc_at_cc_AtCc) -> example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc { let ffi_ref = & * ffi ; example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc { aa : < crate :: fermented :: types :: example_aliasing :: aa :: at_aa :: example_aliasing_aa_at_aa_AtAa as ferment :: FFIConversionFrom < example_aliasing :: aa :: at_aa :: AtAa >> :: ffi_from (ffi_ref . aa) , bb : < crate :: fermented :: types :: example_aliasing :: aa :: bb :: at_bb :: example_aliasing_aa_bb_at_bb_AtBb as ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: at_bb :: AtBb >> :: ffi_from (ffi_ref . bb) , dd : < crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd as ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd >> :: ffi_from (ffi_ref . dd) , xx : < crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: at_xx :: example_aliasing_zz_yy_xx_at_xx_AtXx as ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx >> :: ffi_from (ffi_ref . xx) , yy : < crate :: fermented :: types :: example_aliasing :: zz :: yy :: at_yy :: example_aliasing_zz_yy_at_yy_AtYy as ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: at_yy :: AtYy >> :: ffi_from (ffi_ref . yy) , zz : < crate :: fermented :: types :: example_aliasing :: zz :: at_zz :: example_aliasing_zz_at_zz_AtZz as ferment :: FFIConversionFrom < example_aliasing :: zz :: at_zz :: AtZz >> :: ffi_from (ffi_ref . zz) , vec_ww : < crate :: fermented :: generics :: Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw as ferment :: FFIConversionFrom < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > >> :: ffi_from (ffi_ref . vec_ww) , vec_ww2 : < crate :: fermented :: generics :: Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 as ferment :: FFIConversionFrom < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > >> :: ffi_from (ffi_ref . vec_ww2) } } } impl ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > for example_aliasing_aa_bb_cc_at_cc_AtCc { unsafe fn ffi_to_const (obj : example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc) -> * const example_aliasing_aa_bb_cc_at_cc_AtCc { ferment :: boxed (example_aliasing_aa_bb_cc_at_cc_AtCc { aa : < crate :: fermented :: types :: example_aliasing :: aa :: at_aa :: example_aliasing_aa_at_aa_AtAa as ferment :: FFIConversionTo < example_aliasing :: aa :: at_aa :: AtAa >> :: ffi_to (obj . aa) , bb : < crate :: fermented :: types :: example_aliasing :: aa :: bb :: at_bb :: example_aliasing_aa_bb_at_bb_AtBb as ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: at_bb :: AtBb >> :: ffi_to (obj . bb) , dd : < crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd as ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd >> :: ffi_to (obj . dd) , xx : < crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: at_xx :: example_aliasing_zz_yy_xx_at_xx_AtXx as ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx >> :: ffi_to (obj . xx) , yy : < crate :: fermented :: types :: example_aliasing :: zz :: yy :: at_yy :: example_aliasing_zz_yy_at_yy_AtYy as ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: at_yy :: AtYy >> :: ffi_to (obj . yy) , zz : < crate :: fermented :: types :: example_aliasing :: zz :: at_zz :: example_aliasing_zz_at_zz_AtZz as ferment :: FFIConversionTo < example_aliasing :: zz :: at_zz :: AtZz >> :: ffi_to (obj . zz) , vec_ww : < crate :: fermented :: generics :: Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw as ferment :: FFIConversionTo < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > >> :: ffi_to (obj . vec_ww) , vec_ww2 : < crate :: fermented :: generics :: Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 as ferment :: FFIConversionTo < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > >> :: ffi_to (obj . vec_ww2) }) } } impl Drop for example_aliasing_aa_bb_cc_at_cc_AtCc { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . aa) ; ferment :: unbox_any (ffi_ref . bb) ; ferment :: unbox_any (ffi_ref . dd) ; ferment :: unbox_any (ffi_ref . xx) ; ferment :: unbox_any (ffi_ref . yy) ; ferment :: unbox_any (ffi_ref . zz) ; ferment :: unbox_any (ffi_ref . vec_ww) ; ferment :: unbox_any (ffi_ref . vec_ww2) ; } } } } pub mod dd { pub mod at_dd { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtDd`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_aa_bb_cc_dd_at_dd_AtDd { pub version : u32 } impl ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > for example_aliasing_aa_bb_cc_dd_at_dd_AtDd { unsafe fn ffi_from_const (ffi : * const example_aliasing_aa_bb_cc_dd_at_dd_AtDd) -> example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd { let ffi_ref = & * ffi ; example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > for example_aliasing_aa_bb_cc_dd_at_dd_AtDd { unsafe fn ffi_to_const (obj : example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd) -> * const example_aliasing_aa_bb_cc_dd_at_dd_AtDd { ferment :: boxed (example_aliasing_aa_bb_cc_dd_at_dd_AtDd { version : obj . version }) } } impl Drop for example_aliasing_aa_bb_cc_dd_at_dd_AtDd { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } } } } } } pub mod zz { pub mod at_zz { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtZz`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_zz_at_zz_AtZz { pub version : u32 } impl ferment :: FFIConversionFrom < example_aliasing :: zz :: at_zz :: AtZz > for example_aliasing_zz_at_zz_AtZz { unsafe fn ffi_from_const (ffi : * const example_aliasing_zz_at_zz_AtZz) -> example_aliasing :: zz :: at_zz :: AtZz { let ffi_ref = & * ffi ; example_aliasing :: zz :: at_zz :: AtZz { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_aliasing :: zz :: at_zz :: AtZz > for example_aliasing_zz_at_zz_AtZz { unsafe fn ffi_to_const (obj : example_aliasing :: zz :: at_zz :: AtZz) -> * const example_aliasing_zz_at_zz_AtZz { ferment :: boxed (example_aliasing_zz_at_zz_AtZz { version : obj . version }) } } impl Drop for example_aliasing_zz_at_zz_AtZz { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } } pub mod yy { pub mod at_yy { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtYy`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_zz_yy_at_yy_AtYy { pub version : u32 } impl ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: at_yy :: AtYy > for example_aliasing_zz_yy_at_yy_AtYy { unsafe fn ffi_from_const (ffi : * const example_aliasing_zz_yy_at_yy_AtYy) -> example_aliasing :: zz :: yy :: at_yy :: AtYy { let ffi_ref = & * ffi ; example_aliasing :: zz :: yy :: at_yy :: AtYy { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: at_yy :: AtYy > for example_aliasing_zz_yy_at_yy_AtYy { unsafe fn ffi_to_const (obj : example_aliasing :: zz :: yy :: at_yy :: AtYy) -> * const example_aliasing_zz_yy_at_yy_AtYy { ferment :: boxed (example_aliasing_zz_yy_at_yy_AtYy { version : obj . version }) } } impl Drop for example_aliasing_zz_yy_at_yy_AtYy { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } } pub mod xx { pub mod at_xx { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtXx`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_zz_yy_xx_at_xx_AtXx { pub version : u32 , pub vec_aa : * mut crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd } impl ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx > for example_aliasing_zz_yy_xx_at_xx_AtXx { unsafe fn ffi_from_const (ffi : * const example_aliasing_zz_yy_xx_at_xx_AtXx) -> example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx { let ffi_ref = & * ffi ; example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx { version : ffi_ref . version , vec_aa : < crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd as ferment :: FFIConversionFrom < Vec < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > >> :: ffi_from (ffi_ref . vec_aa) } } } impl ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx > for example_aliasing_zz_yy_xx_at_xx_AtXx { unsafe fn ffi_to_const (obj : example_aliasing :: zz :: yy :: xx :: at_xx :: AtXx) -> * const example_aliasing_zz_yy_xx_at_xx_AtXx { ferment :: boxed (example_aliasing_zz_yy_xx_at_xx_AtXx { version : obj . version , vec_aa : < crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd as ferment :: FFIConversionTo < Vec < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > >> :: ffi_to (obj . vec_aa) }) } } impl Drop for example_aliasing_zz_yy_xx_at_xx_AtXx { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . vec_aa) ; } } } } pub mod ww { pub mod at_ww { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtWw`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_zz_yy_xx_ww_at_ww_AtWw { pub version : u32 , pub vec_cc : * mut crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_at_cc_AtCc } impl ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > for example_aliasing_zz_yy_xx_ww_at_ww_AtWw { unsafe fn ffi_from_const (ffi : * const example_aliasing_zz_yy_xx_ww_at_ww_AtWw) -> example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw { let ffi_ref = & * ffi ; example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw { version : ffi_ref . version , vec_cc : < crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_at_cc_AtCc as ferment :: FFIConversionFrom < Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > >> :: ffi_from (ffi_ref . vec_cc) } } } impl ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > for example_aliasing_zz_yy_xx_ww_at_ww_AtWw { unsafe fn ffi_to_const (obj : example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw) -> * const example_aliasing_zz_yy_xx_ww_at_ww_AtWw { ferment :: boxed (example_aliasing_zz_yy_xx_ww_at_ww_AtWw { version : obj . version , vec_cc : < crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_at_cc_AtCc as ferment :: FFIConversionTo < Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > >> :: ffi_to (obj . vec_cc) }) } } impl Drop for example_aliasing_zz_yy_xx_ww_at_ww_AtWw { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . vec_cc) ; } } } } pub mod at_ww2 { use crate as example_aliasing ; # [doc = "FFI-representation of the [`AtWw2`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { pub version : u32 , pub vec_cc : * mut crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_at_cc_AtCc } impl ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > for example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { unsafe fn ffi_from_const (ffi : * const example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2) -> example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 { let ffi_ref = & * ffi ; example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 { version : ffi_ref . version , vec_cc : < crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_at_cc_AtCc as ferment :: FFIConversionFrom < Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > >> :: ffi_from (ffi_ref . vec_cc) } } } impl ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > for example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { unsafe fn ffi_to_const (obj : example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2) -> * const example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { ferment :: boxed (example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { version : obj . version , vec_cc : < crate :: fermented :: generics :: Vec_example_aliasing_aa_bb_cc_at_cc_AtCc as ferment :: FFIConversionTo < Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > >> :: ffi_to (obj . vec_cc) }) } } impl Drop for example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . vec_cc) ; } } } } } } } } pub mod blockdata { pub mod script { pub mod owned { use crate as example_aliasing ; # [doc = "FFI-representation of the [`ScriptBuf`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_blockdata_script_owned_ScriptBuf (* mut crate :: fermented :: generics :: Vec_u8) ; impl ferment :: FFIConversionFrom < example_aliasing :: blockdata :: script :: owned :: ScriptBuf > for example_aliasing_blockdata_script_owned_ScriptBuf { unsafe fn ffi_from_const (ffi : * const example_aliasing_blockdata_script_owned_ScriptBuf) -> example_aliasing :: blockdata :: script :: owned :: ScriptBuf { let ffi_ref = & * ffi ; example_aliasing :: blockdata :: script :: owned :: ScriptBuf (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionFrom < Vec < u8 > >> :: ffi_from (ffi_ref . 0)) } } impl ferment :: FFIConversionTo < example_aliasing :: blockdata :: script :: owned :: ScriptBuf > for example_aliasing_blockdata_script_owned_ScriptBuf { unsafe fn ffi_to_const (obj : example_aliasing :: blockdata :: script :: owned :: ScriptBuf) -> * const example_aliasing_blockdata_script_owned_ScriptBuf { ferment :: boxed (example_aliasing_blockdata_script_owned_ScriptBuf (< crate :: fermented :: generics :: Vec_u8 as ferment :: FFIConversionTo < Vec < u8 > >> :: ffi_to (obj . 0))) } } impl Drop for example_aliasing_blockdata_script_owned_ScriptBuf { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment :: unbox_any (ffi_ref . 0) ; } } } } } pub mod transaction { pub mod special_transaction { pub mod provider_update_registrar { use crate as example_aliasing ; # [doc = "FFI-representation of the [`ProviderUpdateRegistrarPayload`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { pub version : u16 , pub script_payout : * mut crate :: fermented :: types :: example_aliasing :: blockdata :: script :: owned :: example_aliasing_blockdata_script_owned_ScriptBuf } impl ferment :: FFIConversionFrom < example_aliasing :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload > for example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { unsafe fn ffi_from_const (ffi : * const example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload) -> example_aliasing :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload { let ffi_ref = & * ffi ; example_aliasing :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload { version : ffi_ref . version , script_payout : < crate :: fermented :: types :: example_aliasing :: blockdata :: script :: owned :: example_aliasing_blockdata_script_owned_ScriptBuf as ferment :: FFIConversionFrom < example_aliasing :: blockdata :: script :: owned :: ScriptBuf >> :: ffi_from (ffi_ref . script_payout) } } } impl ferment :: FFIConversionTo < example_aliasing :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload > for example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { unsafe fn ffi_to_const (obj : example_aliasing :: blockdata :: transaction :: special_transaction :: provider_update_registrar :: ProviderUpdateRegistrarPayload) -> * const example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { ferment :: boxed (example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { version : obj . version , script_payout : < crate :: fermented :: types :: example_aliasing :: blockdata :: script :: owned :: example_aliasing_blockdata_script_owned_ScriptBuf as ferment :: FFIConversionTo < example_aliasing :: blockdata :: script :: owned :: ScriptBuf >> :: ffi_to (obj . script_payout) }) } } impl Drop for example_aliasing_blockdata_transaction_special_transaction_provider_update_registrar_ProviderUpdateRegistrarPayload { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; ferment :: unbox_any (ffi_ref . script_payout) ; } } } } } } } # [doc = "FFI-representation of the [`SPV`]"] # [repr (C)] # [derive (Clone)] pub struct example_aliasing_SPV { pub version : u32 } impl ferment :: FFIConversionFrom < example_aliasing :: SPV > for example_aliasing_SPV { unsafe fn ffi_from_const (ffi : * const example_aliasing_SPV) -> example_aliasing :: SPV { let ffi_ref = & * ffi ; example_aliasing :: SPV { version : ffi_ref . version } } } impl ferment :: FFIConversionTo < example_aliasing :: SPV > for example_aliasing_SPV { unsafe fn ffi_to_const (obj : example_aliasing :: SPV) -> * const example_aliasing_SPV { ferment :: boxed (example_aliasing_SPV { version : obj . version }) } } impl Drop for example_aliasing_SPV { fn drop (& mut self) { unsafe { let ffi_ref = self ; ; } } } pub mod dash { use crate as example_aliasing ; # [doc = "FFI-representation of the [`example_aliasing::dash::setup_aa`]"] # [no_mangle] pub unsafe extern "C" fn example_aliasing_dash_setup_aa (transaction : * mut crate :: fermented :: types :: example_aliasing :: aa :: at_aa :: example_aliasing_aa_at_aa_AtAa) { let obj = example_aliasing :: dash :: setup_aa (< crate :: fermented :: types :: example_aliasing :: aa :: at_aa :: example_aliasing_aa_at_aa_AtAa as ferment :: FFIConversionFrom < example_aliasing :: aa :: at_aa :: AtAa >> :: ffi_from (transaction)) ; ; } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unreachable_patterns , unused_braces , unused_imports , unused_parens , unused_qualifications , unused_unsafe , unused_variables)] pub mod generics { use crate as example_aliasing ; # [repr (C)] # [derive (Clone)] pub struct Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: at_cc :: example_aliasing_aa_bb_cc_at_cc_AtCc } impl ferment :: FFIConversionFrom < Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > > for Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { unsafe fn ffi_from_const (ffi : * const Vec_example_aliasing_aa_bb_cc_at_cc_AtCc) -> Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > { let ffi_ref = & * ffi ; ferment :: from_group (ffi_ref . count , ffi_ref . values , | o | < crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: at_cc :: example_aliasing_aa_bb_cc_at_cc_AtCc as ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc >> :: ffi_from (* o)) } } impl ferment :: FFIConversionTo < Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc > > for Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { unsafe fn ffi_to_const (obj : Vec < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc >) -> * const Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_group (obj . into_iter () , | o | < crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: at_cc :: example_aliasing_aa_bb_cc_at_cc_AtCc as ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: cc :: at_cc :: AtCc >> :: ffi_to (o)) }) } } impl Drop for Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { fn drop (& mut self) { unsafe { ferment :: unbox_group (self . values , self . count , | o | ferment :: unbox_any (o)) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_at_cc_AtCc_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: at_cc :: example_aliasing_aa_bb_cc_at_cc_AtCc) -> * mut Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { ferment :: boxed (Vec_example_aliasing_aa_bb_cc_at_cc_AtCc { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_at_cc_AtCc_destroy (ffi : * mut Vec_example_aliasing_aa_bb_cc_at_cc_AtCc) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_at_cc_AtCc_value_at_index (ffi : * const Vec_example_aliasing_aa_bb_cc_at_cc_AtCc , index : usize) -> * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: at_cc :: example_aliasing_aa_bb_cc_at_cc_AtCc { * (* ffi) . values . add (index) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_at_cc_AtCc_set_value_at_index (ffi : * mut Vec_example_aliasing_aa_bb_cc_at_cc_AtCc , index : usize , value : * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: at_cc :: example_aliasing_aa_bb_cc_at_cc_AtCc) { * (* ffi) . values . add (index) = value } # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment :: FFIConversionFrom < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { let ffi_ref = & * ffi ; ferment :: from_group (ffi_ref . count , ffi_ref . values , | o | * o) } } impl ferment :: FFIConversionTo < Vec < u8 > > for Vec_u8 { unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_group (obj . into_iter () , | o | o) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment :: unbox_group (self . values , self . count , | o | ferment :: black_hole (o)) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment :: boxed (Vec_u8 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn Vec_u8_value_at_index (ffi : * const Vec_u8 , index : usize) -> u8 { * (* ffi) . values . add (index) } # [no_mangle] pub unsafe extern "C" fn Vec_u8_set_value_at_index (ffi : * mut Vec_u8 , index : usize , value : u8) { * (* ffi) . values . add (index) = value } # [repr (C)] # [derive (Clone)] pub struct Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd } impl ferment :: FFIConversionFrom < Vec < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > > for Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { unsafe fn ffi_from_const (ffi : * const Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd) -> Vec < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > { let ffi_ref = & * ffi ; ferment :: from_group (ffi_ref . count , ffi_ref . values , | o | < crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd as ferment :: FFIConversionFrom < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd >> :: ffi_from (* o)) } } impl ferment :: FFIConversionTo < Vec < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd > > for Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { unsafe fn ffi_to_const (obj : Vec < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd >) -> * const Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_group (obj . into_iter () , | o | < crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd as ferment :: FFIConversionTo < example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: AtDd >> :: ffi_to (o)) }) } } impl Drop for Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { fn drop (& mut self) { unsafe { ferment :: unbox_group (self . values , self . count , | o | ferment :: unbox_any (o)) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd) -> * mut Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { ferment :: boxed (Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd_destroy (ffi : * mut Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd_value_at_index (ffi : * const Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd , index : usize) -> * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd { * (* ffi) . values . add (index) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd_set_value_at_index (ffi : * mut Vec_example_aliasing_aa_bb_cc_dd_at_dd_AtDd , index : usize , value : * mut crate :: fermented :: types :: example_aliasing :: aa :: bb :: cc :: dd :: at_dd :: example_aliasing_aa_bb_cc_dd_at_dd_AtDd) { * (* ffi) . values . add (index) = value } # [repr (C)] # [derive (Clone)] pub struct Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: example_aliasing_zz_yy_xx_ww_at_ww_AtWw } impl ferment :: FFIConversionFrom < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > > for Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { unsafe fn ffi_from_const (ffi : * const Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw) -> Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > { let ffi_ref = & * ffi ; ferment :: from_group (ffi_ref . count , ffi_ref . values , | o | < crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: example_aliasing_zz_yy_xx_ww_at_ww_AtWw as ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw >> :: ffi_from (* o)) } } impl ferment :: FFIConversionTo < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw > > for Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { unsafe fn ffi_to_const (obj : Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw >) -> * const Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_group (obj . into_iter () , | o | < crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: example_aliasing_zz_yy_xx_ww_at_ww_AtWw as ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: AtWw >> :: ffi_to (o)) }) } } impl Drop for Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { fn drop (& mut self) { unsafe { ferment :: unbox_group (self . values , self . count , | o | ferment :: unbox_any (o)) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: example_aliasing_zz_yy_xx_ww_at_ww_AtWw) -> * mut Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { ferment :: boxed (Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw_destroy (ffi : * mut Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw_value_at_index (ffi : * const Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw , index : usize) -> * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: example_aliasing_zz_yy_xx_ww_at_ww_AtWw { * (* ffi) . values . add (index) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw_set_value_at_index (ffi : * mut Vec_example_aliasing_zz_yy_xx_ww_at_ww_AtWw , index : usize , value : * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww :: example_aliasing_zz_yy_xx_ww_at_ww_AtWw) { * (* ffi) . values . add (index) = value } # [repr (C)] # [derive (Clone)] pub struct Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { pub count : usize , pub values : * mut * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 } impl ferment :: FFIConversionFrom < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > > for Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { unsafe fn ffi_from_const (ffi : * const Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2) -> Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > { let ffi_ref = & * ffi ; ferment :: from_group (ffi_ref . count , ffi_ref . values , | o | < crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 as ferment :: FFIConversionFrom < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 >> :: ffi_from (* o)) } } impl ferment :: FFIConversionTo < Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 > > for Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { unsafe fn ffi_to_const (obj : Vec < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 >) -> * const Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { ferment :: boxed (Self { count : obj . len () , values : ferment :: to_group (obj . into_iter () , | o | < crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 as ferment :: FFIConversionTo < example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: AtWw2 >> :: ffi_to (o)) }) } } impl Drop for Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { fn drop (& mut self) { unsafe { ferment :: unbox_group (self . values , self . count , | o | ferment :: unbox_any (o)) ; ; } } } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2_ctor (count : usize , values : * mut * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2) -> * mut Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { ferment :: boxed (Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { count , values }) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2_destroy (ffi : * mut Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2) { ferment :: unbox_any (ffi) ; } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2_value_at_index (ffi : * const Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 , index : usize) -> * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 { * (* ffi) . values . add (index) } # [no_mangle] pub unsafe extern "C" fn Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2_set_value_at_index (ffi : * mut Vec_example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2 , index : usize , value : * mut crate :: fermented :: types :: example_aliasing :: zz :: yy :: xx :: ww :: at_ww2 :: example_aliasing_zz_yy_xx_ww_at_ww2_AtWw2) { * (* ffi) . values . add (index) = value } }